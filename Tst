local plr = game.Players.LocalPlayer
local WS = game.Workspace
local Rc = game.ReplicatedStorage

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

if game.PlaceId == 4442272183 then
    New_World = true
elseif game.PlaceId == 2753915549 then
    Old_World = true
elseif game.PlaceId == 7449423635 then
    Third_World = true
else
    plr:Kick("Sitinks Hub\n Not Support This Game, Please Don't Execute")
end

Configs = {}

function LoadSettings()
    if readfile and writefile and isfile and isfolder then
        if not isfolder("Sitinks Hub") then
            makefolder("Sitinks Hub")
        end
        if not isfolder("Sitinks Hub/Blox Fruits/") then
            makefolder("Sitinks Hub/Blox Fruits/")
        end
        if not isfile("Sitinks Hub/Blox Fruits/" .. game.Players.LocalPlayer.Name .. ".json") then
            writefile(
                "Sitinks Hub/Blox Fruits/" .. game.Players.LocalPlayer.Name .. ".json",
                game:GetService("HttpService"):JSONEncode(Configs)
            )
        else
            local x =
                game:GetService("HttpService"):JSONDecode(
                readfile("Sitinks Hub/Blox Fruits/" .. game.Players.LocalPlayer.Name .. ".json")
            )
            for y, z in pairs(x) do
                Configs[y] = z
            end
        end
    else
        return
    end
end
function SaveSettings()
    if readfile and writefile and isfile and isfolder then
        if not isfile("Sitinks Hub/Blox Fruits/" .. game.Players.LocalPlayer.Name .. ".json") then
            LoadSettings()
        else
            local x =
                game:GetService("HttpService"):JSONDecode(
                readfile("Sitinks Hub/Blox Fruits/" .. game.Players.LocalPlayer.Name .. ".json")
            )
            local A = {}
            for y, z in pairs(Configs) do
                A[y] = z
            end
            writefile(
                "Sitinks Hub/Blox Fruits/" .. game.Players.LocalPlayer.Name .. ".json",
                game:GetService("HttpService"):JSONEncode(A)
            )
        end
    else
        return
    end
end
LoadSettings()

function Tween(TargetCFrame)
    if plr.Character.Humanoid.Health > 0 and plr.Character:FindFirstChild("HumanoidRootPart") then
        Distance = (TargetCFrame.Position - plr.Character.HumanoidRootPart.Position).Magnitude
        if Distance <= 250 then
            plr.Character.HumanoidRootPart.CFrame = TargetCFrame
        end
        tween = game:GetService("TweenService"):Create(plr.Character.HumanoidRootPart, TweenInfo.new(Distance / 160, Enum.EasingStyle.Quad),{CFrame = TargetCFrame})
        tween:Play()
    end
end

function Buso()
    if not plr.Character:FindFirstChild("HasBuso") then
        local args = {[1] = "Buso"}
        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
    end
end

function GetWP(cac)
    Nahfck = ""
    for i, v in pairs(plr.Backpack:GetChildren()) do
        if v:IsA("Tool") and v.ToolTip == cac then
            Nahfck = v.Name
        end
    end
    for i, v in pairs(plr.Character:GetChildren()) do
        if v:IsA("Tool") and v.ToolTip == cac then
            Nahfck = v.Name
        end
    end
    return Nahfck
end

function EquipWeapon(shit)
    if Configs["Select Weapon"] == "" or Configs["Select Weapon"] == nil then
        Configs["Select Weapon"] = "Melee"
    end
    shit = GetWP(Configs["Select Weapon"])
    local bucac = game.Players.LocalPlayer.Backpack:FindFirstChild(shit)
    if bucac then
        game.Players.LocalPlayer.Character.Humanoid:EquipTool(bucac)
    end
end

function BringMob(cac)
    for i, v in pairs(WS.Enemies:GetChildren()) do
        if
            v.Name == cac and v.Parent and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and
                (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <=
                    300
         then
            v.HumanoidRootPart.CFrame = Stp
            v.Humanoid.JumpPower = 0
            v.Humanoid.WalkSpeed = 0
            v.HumanoidRootPart.Transparency = 1
            v.HumanoidRootPart.CanCollide = false
            v.Head.CanCollide = false
            if v.Humanoid:FindFirstChild("Animator") then
                v.Humanoid.Animator:Destroy()
            end
            sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius", math.huge)
            v.Humanoid:ChangeState(11)
        end
    end
end

function DetectMob(muahahahah)
    if game.Workspace.Enemies:FindFirstChild(muahahahah) then
        for i, v in pairs(game.Workspace.Enemies:GetChildren()) do
            if v.Name == muahahahah and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                return v
            end
        end
    end
end

local TableElite = {
    "Diablo",
    "Urban",
    "Deandre"
}

function DetectElite()
    for i, v in pairs(WS.Enemies:GetChildren()) do
        if table.find(TableElite, v.Name) and v:IsA('Model') and v:FindFirstChild('Humanoid') and v.Humanoid.Health > 0 and v:FindFirstChild('HumanoidRootPart') then
            return v
        end
    end 
    for i, v in pairs(Rc:GetChildren()) do
        if table.find(TableElite, v.Name) and v:IsA('Model') and v:FindFirstChild('Humanoid') and v.Humanoid.Health > 0 and v:FindFirstChild('HumanoidRootPart') then
            return v
        end
    end  
end

function StackFarm()
    
end

local Quest = require(game.ReplicatedStorage.Quests)
local UselessQuest = {"BartiloQuest", "CitizenQuest"}
local function AutoUpdateQuest()
    local lvlPl = plr.Data.Level.Value
    local min = 0
    if lvlPl >= 1450 and game.PlaceId == 4442272183 then 
        Mob1 = "Water Fighter"
        Mob2 = "ForgottenQuest"
        Mob3 = 2
    elseif lvlPl >= 700 and game.PlaceId == 2753915549 then
        Mob1 = "Galley Captain"
        Mob2 = "FountainQuest"
        Mob3 = 2
    else
        for i,v in pairs(Quest) do
            for i1,v1 in pairs(v) do
                local lvlreq = v1.LevelReq
                for i2,v2 in pairs(v1.Task) do
                    if lvlPl >= lvlreq and lvlreq >= min and v1.Task[i2] > 1 and not table.find(UselessQuest, tostring(i)) then
                        min = lvlreq
                        Mob1 = tostring(i2)
                        Mob2 = i
                        Mob3 = i1
                    end
                end
            end
        end
    end
end

function CFrameQuest()
    QuestPoses = {}
    for r, v in pairs(getnilinstances()) do
        if
            v:IsA("Model") and v:FindFirstChild("Head") and v.Head:FindFirstChild("QuestBBG") and
                v.Head.QuestBBG.Title.Text == "QUEST"
         then
            QuestPoses[v.Name] = v.Head.CFrame * CFrame.new(0, -2, 2)
        end
    end
    for r, v in pairs(game.Workspace.NPCs:GetDescendants()) do
        if v.Name == "QuestBBG" and v.Title.Text == "QUEST" then
            QuestPoses[v.Parent.Parent.Name] = v.Parent.Parent.Head.CFrame * CFrame.new(0, -2, 2)
        end
    end
    DialoguesList = {}
    for r, v in pairs(require(game.ReplicatedStorage.DialoguesList)) do
        DialoguesList[v] = r
    end
    local V = getscriptclosure(game:GetService("Players").LocalPlayer.PlayerScripts.NPC)
    local W = {}
    for k, v in pairs(debug.getprotos(V)) do
        if #debug.getconstants(v) == 1 then
            table.insert(W, debug.getconstant(v, 1))
        end
    end
    local X = false
    local Y = {}
    for k, v in pairs(debug.getconstants(V)) do
        if type(v) == "string" then
            if v == "Players" then
                X = false
            end
            if not X then
                if v == "Blox Fruit Dealer" then
                    X = true
                end
            else
            end
            if X then
                table.insert(Y, v)
            end
        end
    end
    local Z = {}
    QuestPoint = {}
    for k, v in pairs(Y) do
        if QuestPoses[v] then
            Z[W[k]] = Y[k]
        end
    end
    for r, v in next, Z do
        QuestPoint[r] = QuestPoses[v]
    end
    QuestPoint["SkyExp1Quest"] =
        CFrame.new(
        -7857.28516,
        5544.34033,
        -382.321503,
        -0.422592998,
        0,
        0.906319618,
        0,
        1,
        0,
        -0.906319618,
        0,
        -0.422592998
    )
end
local Q = require(game.ReplicatedStorage.Quests)
local a3 = require(game.ReplicatedStorage:WaitForChild("GuideModule"))
function CheckDataQuest()
    for r, v in next, a3.Data do
        if r == "QuestData" then
            return true
        end
    end
    return false
end
function CheckNameMobDoubleQuest()
    local a
    if CheckDataQuest() then
        for r, v in next, a3.Data.QuestData.Task do
            a = r
        end
    end
    return a
end
function CheckDoubleQuestSkidcuaYMF()
    AutoUpdateQuest()
    local a5 = {}
    if
        game.Players.LocalPlayer.Data.Level.Value >= 10 and _G.S.DoubleQuest and CheckDataQuest() and
            CheckNameMobDoubleQuest() == Mob1 and
            #CheckNameMobDoubleQuest() > 2
     then
        for r, v in pairs(Q) do
            for M, N in pairs(v) do
                for O, P in pairs(N.Task) do
                    if tostring(O) == Mob1 then
                        for a6, a7 in next, v do
                            for a8, a9 in next, a7.Task do
                                if a8 ~= Mob1 and a9 > 1 then
                                    if a7.LevelReq <= game.Players.LocalPlayer.Data.Level.Value then
                                        a5["Name"] = tostring(a8)
                                        a5["Mob2"] = r
                                        a5["ID"] = a6
                                    else
                                        a5["Name"] = Mob1
                                        a5["Mob2"] = Mob2
                                        a5["ID"] = Mob3
                                    end
                                    return a5
                                end
                            end
                        end
                    end
                end
            end
        end
    else
        a5["Name"] = Mob1
        a5["Mob2"] = Mob2
        a5["ID"] = Mob3
        return a5
    end
    a5["Name"] = Mob1
    a5["Mob2"] = Mob2
    a5["ID"] = Mob3
    return a5
end
function MobLevel1OrMobLevel2()
    local aa = {}
    for r, v in pairs(game.Workspace.Enemies:GetChildren()) do
        if
            not table.find(aa, v.Name) and v:IsA("Model") and v.Name ~= "PirateBasic" and
                not string.find(v.Name, "Brigade") and
                v:FindFirstChild("Humanoid") and
                v.Humanoid.Health > 0 and
                v:FindFirstChild("HumanoidRootPart")
         then
            table.insert(aa, v.Name)
        end
    end
    for r, v in pairs(aa) do
        local ab = v
        v = tostring(v:gsub(" %pLv. %d+%p", ""))
        if tostring(v) == CheckNameMobDoubleQuest() then
            return tostring(ab)
        end
    end
    return false
end
local ad = game.ReplicatedStorage.Remotes["CommF_"]
CFrameQuest()
function GetQuest()
    if game.Players.LocalPlayer.PlayerGui.Main:FindFirstChild("Quest").Visible then
        return
    end
    if not QuestPoint[tostring(CheckDoubleQuestSkidcuaYMF().Mob2)] then
        CFrameQuest()
        return
    end
    if
        (QuestPoint[CheckDoubleQuestSkidcuaYMF().Mob2].Position -
            game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 10
     then
        ad:InvokeServer("StartQuest", tostring(CheckDoubleQuestSkidcuaYMF().Mob2), CheckDoubleQuestSkidcuaYMF().ID)
    else
        QuestCFrame = QuestPoint[CheckDoubleQuestSkidcuaYMF().Mob2]
        NoClip = true
        Tween(QuestCFrame)
    end
end

Mob = ""
Mob1 = ""
plr = game.Players.LocalPlayer
if game.Workspace:FindFirstChild("MobSpawns") then
    for i, v in pairs(game.Workspace:GetChildren()) do
        if v.Name == "MobSpawns" then
            v:Destroy()
        end
    end
end
local CreateFoldermmb = Instance.new("Folder")
CreateFoldermmb.Parent = game.Workspace
CreateFoldermmb.Name = "MobSpawns"

function RemoveLevelTitle(v)
    return tostring(tostring(v):gsub(" %pLv. %d+%p", ""):gsub(" %pRaid Boss%p", ""):gsub(" %pBoss%p", ""))
end 
task.spawn(
    function()
        while task.wait() do 
            pcall(function()
                for i,v in pairs(game.workspace.MobSpawns:GetChildren()) do  
                    v.Name = RemoveLevelTitle(v.Name)
                end
            end)
            task.wait(50)
        end
    end
)
function MobDepTrai()
    MobDepTraiTable = {}
    for i, v in pairs(game:GetService("Workspace")["_WorldOrigin"].EnemySpawns:GetChildren()) do
        table.insert(MobDepTraiTable, v)
    end
    local tablefoldermmb = {}
    for i, v in next, require(game:GetService("ReplicatedStorage").Quests) do
        for i1, v1 in next, v do
            for i2, v2 in next, v1.Task do
                if v2 > 1 then
                    table.insert(tablefoldermmb, i2)
                end
            end
        end
    end
    for i, v in pairs(getnilinstances()) do
        if table.find(tablefoldermmb, RemoveLevelTitle(v.Name)) then
            table.insert(MobDepTraiTable, v)
        end
    end
    return MobDepTraiTable
end
local MobSpawnList = MobDepTrai()
function ReloadFolderMob()
    for i, v in next, game.Workspace.MobSpawns:GetChildren() do
        v:Destroy()
    end
    for i, v in pairs(MobSpawnList) do
        if v then
            if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") then
                MobNew = Instance.new("Part")
                MobNew.CFrame = v.HumanoidRootPart.CFrame
                MobNew.Name = v.Name
                MobNew.Anchored = true
                MobNew.Transparency = 1
                MobNew.CanCollide = false
                MobNew.Parent = game.Workspace.MobSpawns
            elseif v:IsA("Part") then
                MobNew = v:Clone()
                MobNew.Parent = game.Workspace.MobSpawns
            end
        end
    end
end
ReloadFolderMob()
function GetMobSpawnList(a)
    a = RemoveLevelTitle(a)
    k = {}
    for i, v in pairs(game.Workspace.MobSpawns:GetChildren()) do
        if v.Name == a then
            table.insert(k, v)
        end
    end
    return k
end
function GetMob()
    local tablegetmob = {}
    for i, v in pairs(game.Workspace.MobSpawns:GetChildren()) do
        if not table.find(tablegetmob, v.Name) then
            table.insert(tablegetmob, v.Name)
        end
    end
    if string.find(game:GetService("Workspace")["_WorldOrigin"].EnemySpawns:GetChildren()[1].Name, "Lv.") then
        for i, v in pairs(tablegetmob) do
            local b = v
            v = tostring(v:gsub(" %pLv. %d+%p", ""))
            if v == CheckNameMobDoubleQuest() then
                return b
            end
        end
    else
        return CheckNameMobDoubleQuest()
    end
end
function GetMobName(Name)
    local tablegetmob = {}
    for i, v in pairs(game.Workspace.MobSpawns:GetChildren()) do
        if not table.find(tablegetmob, v.Name) then
            table.insert(tablegetmob, v.Name)
        end
    end
    if string.find(game:GetService("Workspace")["_WorldOrigin"].EnemySpawns:GetChildren()[1].Name, "Lv.") then
        for i, v in pairs(tablegetmob) do
            local b = v
            v = tostring(v:gsub(" %pLv. %d+%p", ""))
            if v == Name then
                return b
            end
        end
    else
        return Name
    end
end

function SendKey(c9)
    game:service("VirtualInputManager"):SendKeyEvent(true, c9, false, game)
    wait()
    game:service("VirtualInputManager"):SendKeyEvent(false, c9, false, game)
end

function CheckDistancebyCFrame(ta, cc)
    tla,me = pcall(function()
        return game.Players.LocalPlayer.Character.HumanoidRootPart
    end)
    if tla then 
        if not cc then 
            cc = me 
        end
        return (ta.Position-cc.Position).Magnitude
    end
end 

local CombatFramework = require(game:GetService("Players").LocalPlayer.PlayerScripts:WaitForChild("CombatFramework"))
local CombatFrameworkR = getupvalues(CombatFramework)[2]
local RigController = require(game:GetService("Players")["LocalPlayer"].PlayerScripts.CombatFramework.RigController)
local RigControllerR = getupvalues(RigController)[2]

function CurrentWeapon()
    local ac = CombatFrameworkR.activeController
    local ret = ac.blades[1]
    if not ret then return game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Name end
    pcall(function()
        while ret.Parent~=game.Players.LocalPlayer.Character do ret=ret.Parent end
    end)
    if not ret then return game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Name end
    return ret
end

function getAllBladeHitsPlayers(Sizes)
    local Hits = {}
    local Client = game.Players.LocalPlayer
    local Characters = game:GetService("Workspace").Characters:GetChildren()
    for i=1,#Characters do local v = Characters[i]
        local Human = v:FindFirstChildOfClass("Humanoid")
        if v.Name ~= game.Players.LocalPlayer.Name and Human and Human.RootPart and Human.Health > 0 and Client:DistanceFromCharacter(Human.RootPart.Position) < Sizes+5 then
            table.insert(Hits,Human.RootPart)
        end
    end
    return Hits
end

function getAllBladeHits(Sizes)
    local Hits = {}
    local Client = game.Players.LocalPlayer
    local Enemies = game:GetService("Workspace").Enemies:GetChildren()
    for i=1,#Enemies do local v = Enemies[i]
        local Human = v:FindFirstChildOfClass("Humanoid")
        if Human and Human.RootPart and Human.Health > 0 and Client:DistanceFromCharacter(Human.RootPart.Position) < Sizes+5 then
            table.insert(Hits,Human.RootPart)
        end
    end
    return Hits
end

function DetectFastAttack()
    local ac = CombatFrameworkR.activeController
    if ac and ac.equipped then
        for indexincrement = 1, 1 do
            local bladehit = getAllBladeHits(60)
            if #bladehit > 0 then
                local AcAttack8 = debug.getupvalue(ac.attack, 5)
                local AcAttack9 = debug.getupvalue(ac.attack, 6)
                local AcAttack7 = debug.getupvalue(ac.attack, 4)
                local AcAttack10 = debug.getupvalue(ac.attack, 7)
                local NumberAc12 = (AcAttack8 * 798405 + AcAttack7 * 727595) % AcAttack9
                local NumberAc13 = AcAttack7 * 798405
                (function()
                    NumberAc12 = (NumberAc12 * AcAttack9 + NumberAc13) % 1099511627776
                    AcAttack8 = math.floor(NumberAc12 / AcAttack9)
                    AcAttack7 = NumberAc12 - AcAttack8 * AcAttack9
                end)()
                AcAttack10 = AcAttack10 + 1 
                debug.setupvalue(ac.attack, 5, AcAttack8)
                debug.setupvalue(ac.attack, 6, AcAttack9)
                debug.setupvalue(ac.attack, 4, AcAttack7)
                debug.setupvalue(ac.attack, 7, AcAttack10)
                for k, v in pairs(ac.animator.anims.basic) do
                    v:Play(1.0E-5,1.0E-5,1.0E-5)
                end                 
                if game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool") and ac.blades and ac.blades[1] then 
                    game:GetService("ReplicatedStorage").RigControllerEvent:FireServer("weaponChange",tostring(CurrentWeapon()))
                    game.ReplicatedStorage.Remotes.Validator:FireServer(math.floor(NumberAc12 / 1099511627776 * 16777215), AcAttack10)
                    game:GetService("ReplicatedStorage").RigControllerEvent:FireServer("hit", bladehit, indexincrement, "")
                end
            end
        end
    end
end

function KillMob(C, a)
    for i, v in pairs(WS.Enemies:GetChildren()) do
        local stringgsub = v.Name:gsub(" %pLv. %d+%p", "")
        if (((typeof(C) == "table" and (table.find(C, v.Name) or table.find(C, stringgsub))) or (v.Name == C or C == stringgsub))) and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
            repeat wait()
                Buso()
                EquipWeapon()
                Stp = v.HumanoidRootPart.CFrame
                BringMob(C)
                Tween(v.HumanoidRootPart.CFrame * CFrame.new(0, 15, 0))
                NoClip = true
            until not a or not v:FindFirstChild("Humanoid") or v:FindFirstChild("Humanoid").Health <= 0 or not v.Parent or not v:FindFirstChild("HumanoidRootPart")
            NoClip = false
        end
    end
end

----------------------------------------------------------------------------------------------------------------------------------------

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Sitinks Hub ",
    SubTitle = "discord.gg/JURvkuHr28",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Darked",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

local Tabs = {
    StatusServers = Window:AddTab({ Title = "Status & Servers", Icon = "bar-chart"}),
    SettingsFarm = Window:AddTab({ Title = "Settings Farm", Icon = "settings-2"}),
    MainFarm = Window:AddTab({ Title = "Main Farm", Icon = "house"})
}

local Options = Fluent.Options

-- // Status Servers \\ --

local StatusFarm = Tabs.StatusServers:AddParagraph({
    Title = "Status Farm : Not Farm",
    Content = "Status : Please Farm"
})

-- // Settings Farm \\ --

local SelectWP = Tabs.SettingsFarm:AddDropdown("Select Weapon", {
    Title = "Select Weapon",
    Values = {"Melee", "Sword"},
    Multi = false,
    Default = Configs["Select Weapon"],
    Callback = function(Value)
        Configs["Select Weapon"] = Value
        SaveSettings()
    end
})

local FastDelaySelect = Tabs.SettingsFarm:AddDropdown("Select Delay", {
    Title = "FastAttack Delay",
    Values = {"0.1", "0.2", "0.3"},
    Multi = false,
    Default = Configs["FastAttackDelay"],
    Callback = function(Value)
        Configs["FastAttackDelay"] = Value
        SaveSettings()
    end
})

local ToggleAutoBuso = Tabs.SettingsFarm:AddToggle("Auto Buso", {
    Title = "Auto Buso", 
    Default = true,
    Description = "",
    Callback = function(Value)
        Configs["Auto Buso"] = Value
        SaveSettings()
    end
})

local ToggleAutoObservation = Tabs.SettingsFarm:AddToggle("Auto Observation", {
    Title = "Auto Observation", 
    Default = Configs["Auto Observation"],
    Description = "",
    Callback = function(Value)
        Configs["Auto Observation"] = Value
        SaveSettings()
    end
})

local ToggleAutoV4 = Tabs.SettingsFarm:AddToggle("Auto Awakening Race", {
    Title = "Auto Awakening Race", 
    Default = Configs["Auto Awakening Race"],
    Description = "",
    Callback = function(Value)
        Configs["Auto Awakening Race"] = Value
        SaveSettings()
    end
})

spawn(function()
    while wait() do
        if Configs["Auto Observation"] then
            if not plr.PlayerGui.Main:FindFirstChild("ImageLabel") then
                SendKey("E")
            end
        end
        if Configs["Auto Buso"] then
            Buso()
        end
        if Configs["Auto Awakening Race"] then
            if plr.Character:FindFirstChild("RaceEnergy") and not game.Players.LocalPlayer.Character.RaceTransformed.Value and plr.Character.RaceEnergy.Value >= 1 then
                SendKey("Y")
            end
        end
    end
end)

spawn(function()
    while wait() do
        if NoClip == true then
            if plr.Character:FindFirstChild("Head") then
                if not plr.Character.Head:FindFirstChild("NoClip") then
                    local BodyVelocity = Instance.new("BodyVelocity", plr.Character.Head)
                    BodyVelocity.Name = "NoClip"
                    BodyVelocity.Velocity = Vector3.new(0, 0, 0)
                    BodyVelocity.MaxForce = Vector3.new(9999999, 9999999, 9999999)
                    BodyVelocity.P = 15000
                end
                for i, v in pairs(plr.Character:GetDescendants()) do
                    if v:IsA("BasePart") then
                        v.CanCollide = false
                    end
                end
            end
        else
            if plr.Character:FindFirstChild("Head") then
                if plr.Character.Head:FindFirstChild("NoClip") then
                    plr.Character.Head:FindFirstChild("NoClip"):Destroy()
                end
                plr.Character.Humanoid:ChangeState()
            end
        end
    end
end)

-- // Main Farm \\ --

local DropdownMethodFarm = Tabs.MainFarm:AddDropdown("Dropdown", {
    Title = "Select Method Farm",
    Values = {"Level Farm", "Cake Prince", "Bone"},
    Multi = false,
    Default = Configs["Select Method Farm"],
    Callback = function(Value)
        Configs["Select Method Farm"] = Value
        SaveSettings()
    end
})

local ToggleAutoFarm = Tabs.MainFarm:AddToggle("Auto Farm", {
    Title = "Auto Farm", 
    Default = Configs["Auto Farm"],
    Description = "",
    Callback = function(Value)
        Configs["Auto Farm"] = Value
        SaveSettings()
    end
})

local MobCakeIsland = {
    "Baking Staff",
    "Head Baker",
    "Cake Guard",
    "Cookie Crafter"
}
local MobHauntedCastle = {
    "Reborn Skeleton [Lv. 1975]",
    "Demonic Soul [Lv. 2025]",
    "Living Zombie [Lv. 2000]",
    "Posessed Mummy [Lv. 2050]",
}

IsAutoFarm = true
function AutoFarm()
    if not IsAutoFarm then
        return
    end
    if Configs["Select Method Farm"] == "Cake Prince" then
        if DetectMob("Baking Staff") or DetectMob("Cookie Crafter") or DetectMob("Cake Guard") or DetectMob("Head Baker") then                                     
            for r, v in pairs(WS.Enemies:GetChildren()) do
                if table.find(MobCakeIsland, v.Name) and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and v.Parent and v:FindFirstChild("HumanoidRootPart") then
                    repeat task.wait()
                        KillMob(v.Name, Configs["Auto Farm"])
                        StatusFarm:SetDesc("Killing Mob".. v.Name)
                    until not Configs["Auto Farm"] or Configs["Select Method Farm"] ~= "Cake Prince" or not v.Parent or not v:FindFirstChild("Humanoid") or v.Humanoid.Health <= 0 or not v:FindFirstChild("HumanoidRootPart")
                end
            end
        else
            for i, v in pairs(GetMobSpawnList(GetMobName("Cake Guard"))) do
                repeat wait()
                    NoClip = true
                    Tween(v.CFrame * CFrame.new(2, 20, 2))
                    StatusFarm:SetDesc("Waitting Mob...")
                until not Configs["Auto Farm"] or Configs["Select Method Farm"] ~= "Cake Prince" or DetectMob("Cake Guard") or CheckDistancebyCFrame(v) <= 100
            end
        end
    end
end

spawn(function()
    while wait() do
        if Configs["Auto Farm"] then
            AutoFarm()
        end
    end
end)

spawn(function()
    while task.wait(0.001) do
        repeat task.wait(0.15)
            DetectFastAttack()
        until not IsAutoFarm
    end
end)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local task = task or require(game:GetService("ReplicatedStorage"):WaitForChild("task"))
task.spawn(function()
    local hookFunction = hookfunction or hookfunc or function(...) end
    local Container = ReplicatedStorage:WaitForChild("Effect"):WaitForChild("Container")
    local CameraShaker = require(ReplicatedStorage:WaitForChild("Util"):WaitForChild("CameraShaker"))
    local Death = require(Container:WaitForChild("Death"))
    local Respawn = require(Container:WaitForChild("Respawn"))
    hookFunction(Death, function() 
        return nil 
    end)
    hookFunction(Respawn, function() 
        return nil 
    end)
    CameraShaker:Stop()
end)
