local Q = require(game.ReplicatedStorage.Quests)
local plr = game.Players.LocalPlayer
local R = {"BartiloQuest", "Trainees", "MarineQuest", "CitizenQuest"}
if game.PlaceId == 2753915549 then
    Sea1 = true
elseif game.PlaceId == 4442272183 then
    Sea2 = true
elseif game.PlaceId == 7449423635 then
    Sea3 = true
else
    game.Players.LocalPlayer:Kick("Not Support This Game!")
end
function CheckNearestTeleporter(aI)
    vcspos = aI.Position
    min = math.huge
    min2 = math.huge
    if Sea3 then
        TableLocations = {
            ["1"] = Vector3.new(-5058.77490234375, 314.5155029296875, -3155.88330078125),
            ["2"] = Vector3.new(5756.83740234375, 610.4240112304688, -253.9253692626953),
            ["3"] = Vector3.new(-12463.8740234375, 374.9144592285156, -7523.77392578125),
            ["4"] = Vector3.new(28282.5703125, 14896.8505859375, 105.1042709350586),
            ["5"] = Vector3.new(-11993.580078125, 334.7812805175781, -8844.1826171875),
            ["6"] = Vector3.new(5314.58203125, 25.419387817382812, -125.94227600097656)
        }
    elseif Sea2 then
        TableLocations = {
            ["1"] = Vector3.new(-288.46246337890625, 306.130615234375, 597.9988403320312),
            ["2"] = Vector3.new(2284.912109375, 15.152046203613281, 905.48291015625),
            ["3"] = Vector3.new(923.21252441406, 126.9760055542, 32852.83203125),
            ["4"] = Vector3.new(-6508.5581054688, 89.034996032715, -132.83953857422)
        }
    elseif Sea1 then
        TableLocations = {
            ["1"] = Vector3.new(-7894.6201171875, 5545.49169921875, -380.2467346191406),
            ["2"] = Vector3.new(-4607.82275390625, 872.5422973632812, -1667.556884765625),
            ["3"] = Vector3.new(61163.8515625, 11.759522438049316, 1819.7841796875),
            ["4"] = Vector3.new(3876.280517578125, 35.10614013671875, -1939.3201904296875)
        }
    end
    TableLocations2 = {}
    for r, v in pairs(TableLocations) do
        TableLocations2[r] = (v - vcspos).Magnitude
    end
    for r, v in pairs(TableLocations2) do
        if v < min then
            min = v
            min2 = v
        end
    end
    for r, v in pairs(TableLocations2) do
        if v < min then
            min = v
            min2 = v
        end
    end
    for r, v in pairs(TableLocations2) do
        if v <= min then
            choose = TableLocations[r]
        end
    end
    min3 = (vcspos - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
    if min2 <= min3 then
        return choose
    end
end
function requestEntrance(aJ)
    game.ReplicatedStorage.Remotes.CommF_:InvokeServer("requestEntrance", aJ)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.X, game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Y + 50, game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Z)
end
function Tween(P)
    Distance = (P.Position - plr.Character.HumanoidRootPart.Position).Magnitude
    tween = game:GetService("TweenService"):Create(
        game:GetService("Players").LocalPlayer.Character.HumanoidRootPart,
        TweenInfo.new(Distance/325, Enum.EasingStyle.Linear),
        {CFrame = P}
    )
    if plr.Data.Level.Value >= 10 then
        local NearestPotal = CheckNearestTeleporter(P)
        if NearestPotal then
            pcall(function()
                tween:Cancel()
            end)
            requestEntrance(NearestPotal)
        end
    end
    if Distance <= 250 then
        tween:Cancel()
        plr.Character.HumanoidRootPart.CFrame = P
    end
    tween:Play()
end
function GetQuest()
    local T = plr.Data.Level.Value
    local min = 0
    if T >= 1450 and game.PlaceId == 4442272183 then
        Mob = "Water Fighter"
        NQuest = "ForgottenQuest"
        LQuest = 2
    elseif T >= 700 and game.PlaceId == 2753915549 then
        Mob = "Galley Captain"
        NQuest = "FountainQuest"
        LQuest = 2
    else
        for r, v in pairs(Q) do
            for M, N in pairs(v) do
                local U = N.LevelReq
                for O, P in pairs(N.Task) do
                    if T >= U and U >= min and N.Task[O] > 1 and not table.find(R, tostring(r)) then
                        min = U
                        Mob = tostring(O)
                        NQuest = r
                        LQuest = M
                    end
                end
            end
        end
    end
end
function CFrameQuest()
    QuestPoses = {}
    for r, v in pairs(getnilinstances()) do
        if
            v:IsA("Model") and v:FindFirstChild("Head") and v.Head:FindFirstChild("QuestBBG") and
                v.Head.QuestBBG.Title.Text == "QUEST"
         then
            QuestPoses[v.Name] = v.Head.CFrame * CFrame.new(0, -2, 2)
        end
    end
    for r, v in pairs(game.Workspace.NPCs:GetDescendants()) do
        if v.Name == "QuestBBG" and v.Title.Text == "QUEST" then
            QuestPoses[v.Parent.Parent.Name] = v.Parent.Parent.Head.CFrame * CFrame.new(0, -2, 2)
        end
    end
    DialoguesList = {}
    for r, v in pairs(require(game.ReplicatedStorage.DialoguesList)) do
        DialoguesList[v] = r
    end
    local V = getscriptclosure(game:GetService("Players").LocalPlayer.PlayerScripts.NPC)
    local W = {}
    for k, v in pairs(debug.getprotos(V)) do
        if #debug.getconstants(v) == 1 then
            table.insert(W, debug.getconstant(v, 1))
        end
    end
    local X = false
    local Y = {}
    for k, v in pairs(debug.getconstants(V)) do
        if type(v) == "string" then
            if v == "Players" then
                X = false
            end
            if not X then
                if v == "Blox Fruit Dealer" then
                    X = true
                end
            else
            end
            if X then
                table.insert(Y, v)
            end
        end
    end
    local Z = {}
    QuestPoint = {}
    for k, v in pairs(Y) do
        if QuestPoses[v] then
            Z[W[k]] = Y[k]
        end
    end
    for r, v in next, Z do
        QuestPoint[r] = QuestPoses[v]
    end
    QuestPoint["SkyExp1Quest"] =
        CFrame.new(
        -7857.28516,
        5544.34033,
        -382.321503,
        -0.422592998,
        0,
        0.906319618,
        0,
        1,
        0,
        -0.906319618,
        0,
        -0.422592998
    )
end
function CheckDoubleQuest()
    local a = {}
    for r, v in pairs(Q) do
        for M, N in pairs(v) do
            local U = N.LevelReq
            for O, P in pairs(N.Task) do
                if O == Mob then
                    for _, a0 in next, v do
                        if a0.LevelReq <= game.Players.LocalPlayer.Data.Level.Value and a0.Name ~= "Town Raid" then
                            for a1, a2 in next, a0.Task do
                                if a2 > 1 then
                                    table.insert(a, a1)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    return a
end
local a3 = require(game.ReplicatedStorage:WaitForChild("GuideModule"))
function CheckQuestData()
    for r, v in next, a3.Data do
        if r == "QuestData" then
            return true
        end
    end
    return false
end
function CheckNameDoubleQuest()
    local a
    if CheckQuestData() then
        for r, v in next, a3.Data.QuestData.Task do
            a = r
        end
    end
    return a
end
function CheckNameDoubleQuest2()
    local a
    local a4 = {}
    if CheckQuestData() then
        for r, v in next, a3.Data.QuestData.Task do
            a = r
            table.insert(a4, r)
        end
    end
    return a4
end
function CheckDoubleQuest2()
    GetQuest()
    local a5 = {}
    if
        game.Players.LocalPlayer.Data.Level.Value >= 10 and CheckQuestData() and
            CheckNameDoubleQuest() == Mob and
            #CheckNameDoubleQuest() > 2
     then
        for r, v in pairs(Q) do
            for M, N in pairs(v) do
                for O, P in pairs(N.Task) do
                    if tostring(O) == Mob then
                        for a6, a7 in next, v do
                            for a8, a9 in next, a7.Task do
                                if a8 ~= Mob and a9 > 1 then
                                    if a7.LevelReq <= game.Players.LocalPlayer.Data.Level.Value then
                                        a5["Name"] = tostring(a8)
                                        a5["NameQuest"] = r
                                        a5["ID"] = a6
                                    else
                                        a5["Name"] = Mob
                                        a5["NameQuest"] = NQuest
                                        a5["ID"] = LQuest
                                    end
                                    return a5
                                end
                            end
                        end
                    end
                end
            end
        end
    else
        a5["Name"] = Mob
        a5["NameQuest"] = NQuest
        a5["ID"] = LQuest
        return a5
    end
    a5["Name"] = Mob
    a5["NameQuest"] = NQuest
    a5["ID"] = LQuest
    return a5
end
function MobLevel1OrMobLevel2()
    local aa = {}
    for r, v in pairs(game.Workspace.Enemies:GetChildren()) do
        if
            not table.find(aa, v.Name) and v:IsA("Model") and v.Name ~= "PirateBasic" and
                not string.find(v.Name, "Brigade") and
                v:FindFirstChild("Humanoid") and
                v.Humanoid.Health > 0 and
                v:FindFirstChild("HumanoidRootPart")
         then
            table.insert(aa, v.Name)
        end
    end
    for r, v in pairs(aa) do
        local ab = v
        v = tostring(v:gsub(" %pLv. %d+%p", ""))
        if tostring(v) == CheckNameDoubleQuest() then
            return tostring(ab)
        end
    end
    return false
end

CFrameQuest()
function GetQuest()
    if game.Players.LocalPlayer.PlayerGui.Main:FindFirstChild("Quest").Visible then
        return
    end
    if not QuestPoint[tostring(CheckDoubleQuest2().NameQuest)] then
        CFrameQuest()
        return
    end
    if
        (QuestPoint[CheckDoubleQuest2().NameQuest].Position -
            game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 10
     then
        game.ReplicatedStorage.Remotes["CommF_"]:InvokeServer("StartQuest", tostring(CheckDoubleQuest2().NameQuest), CheckDoubleQuest2().ID)
    else
        QuestCFrame = QuestPoint[CheckDoubleQuest2().NameQuest]
        Tween(QuestCFrame)
    end
end
function GetMob()
    local ae = {}
    for r, v in pairs(game.Workspace.MobSpawns:GetChildren()) do
        if not table.find(ae, v.Name) then
            table.insert(ae, v.Name)
        end
    end
    if string.find(game:GetService("Workspace")["_WorldOrigin"].EnemySpawns:GetChildren()[1].Name, "Lv.") then
        for r, v in pairs(ae) do
            local ab = v
            v = tostring(v:gsub(" %pLv. %d+%p", ""))
            if v == CheckNameDoubleQuest() then
                return ab
            end
        end
    else
        return CheckNameDoubleQuest()
    end
end
function CheckEnemies(Na)
    if game.Workspace.Enemies:FindFirstChild(Na) then
        for i, v in pairs(game.Workspace.Enemies:GetChildren()) do
            if v.Name == Na then
                if v.Humanoid.Health > 0 and v.Parent and v:FindFirstChild("HumanoidRootPart") then
                    return v
                end
            end
        end
    end
end
function KillMob(Name)
    v = CheckEnemies(Name)
    if v then
        if v.Humanoid.Health > 0 and v.Parent and v:FindFirstChild("HumanoidRootPart") then
            repeat wait()
                v.HumanoidRootPart.CanCollide = false
                v.Head.CanCollide = false
                v.Humanoid.WalkSpeed = 0
                v.HumanoidRootPart.Transparency = 1
                v.Humanoid.JumpPower = 0
                PosBring = v.HumanoidRootPart.CFrame
                v.HumanoidRootPart.CFrame = PosBring
                Tween(v.HumanoidRootPart.CFrame * CFrame.new(0, 15, 0))
            until not v.Parent or v.Humanoid.Health <= 0 or not v:FindFirstChild("HumanoidRootPart")
        end
    end
end

spawn(function()
    while wait() do
        pcall(function()
            if plr.PlayerGui.Main.Quest.Visible == true then
                if game.Workspace.Enemies:FindFirstChild(MobLevel1OrMobLevel2()) then
                    for i, v in pairs(game.Workspace.Enemies:GetChildren()) do
                        if v.Name == MobLevel1OrMobLevel2() then
                            if v.Humanoid.Health > 0 and v.Parent and v:FindFirstChild("HumanoidRootPart") then
                                repeat wait()
                                    KillMob(v)
                                until not v.Parent or v.Humanoid.Health <= 0 or not v:FindFirstChild("HumanoidRootPart")
                            end
                        end
                    end
                else
                    for i, v in pairs(game.Workspace["_WorldOrigin"].EnemySpawns:GetChildren()) do
                        if string.find(v.Name, MobLevel1OrMobLevel2()) then
                            Tween(v.CFrame * CFrame.new(0, 15, 0))
                        end
                    end
                end
            else
                GetQuest()
            end
        end)
    end
end)
