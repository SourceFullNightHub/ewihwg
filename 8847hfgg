if game.PlaceId == 2753915549 then
    Sea1 = true
elseif game.PlaceId == 4442272183 then
    Sea2 = true
elseif game.PlaceId == 7449423635 then
    Sea3 = true
else
    game.Players.LocalPlayer:Kick("Not Support This Game!")
end

local plr = game.Players.LocalPlayer

function CheckNearestTeleporter(P)
    local min = math.huge
    local min2 = math.huge
    local choose 
    if Sea3 then
        TableLocations = {
            ["1"] = Vector3.new(-5058.77490234375, 314.5155029296875, -3155.88330078125),
            ["2"] = Vector3.new(5756.83740234375, 610.4240112304688, -253.9253692626953),
            ["3"] = Vector3.new(-12463.8740234375, 374.9144592285156, -7523.77392578125),
            ["4"] = Vector3.new(28282.5703125, 14896.8505859375, 105.1042709350586),
            ["5"] = Vector3.new(-11993.580078125, 334.7812805175781, -8844.1826171875),
            ["6"] = Vector3.new(5314.58203125, 25.419387817382812, -125.94227600097656)
        }
    elseif Sea2 then
        TableLocations = {
            ["1"] = Vector3.new(-288.46246337890625, 306.130615234375, 597.9988403320312),
            ["2"] = Vector3.new(2284.912109375, 15.152046203613281, 905.48291015625),
            ["3"] = Vector3.new(923.21252441406, 126.9760055542, 32852.83203125),
            ["4"] = Vector3.new(-6508.5581054688, 89.034996032715, -132.83953857422)
        }
    elseif Sea1 then
        if plr.Data.Level.Value <= 9 then
            TableLocations = {
                ["1"] = Vector3.new(-7894.6201171875, 5545.49169921875, -380.2467346191406),
                ["2"] = Vector3.new(61163.8515625, 11.759522438049316, 1819.7841796875),
            }
        elseif plr.Data.Level.Value >= 10 then
            TableLocations = {
                ["1"] = Vector3.new(-7894.6201171875, 5545.49169921875, -380.2467346191406),
                ["2"] = Vector3.new(-4607.82275390625, 872.5422973632812, -1667.556884765625),
                ["3"] = Vector3.new(61163.8515625, 11.759522438049316, 1819.7841796875),
            }
        end
    end
    TableLocations2 = {}
    for r, v in pairs(TableLocations) do
        TableLocations2[r] = (v - P.Position).Magnitude
    end
    for r, v in pairs(TableLocations2) do
        if v < min then
            min = v
            min2 = v
        end
    end    
    for r, v in pairs(TableLocations2) do
        if v <= min then
            choose = TableLocations[r]
        end
    end
    if min2 <= (P.Position - plr.Character.HumanoidRootPart.Position).Magnitude then
        return choose
    end
end
function RETeleport(P)
    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("CommF_"):InvokeServer("requestEntrance", P)
    plr.Character.HumanoidRootPart.CFrame = CFrame.new(plr.Character.HumanoidRootPart.CFrame.X, plr.Character.HumanoidRootPart.CFrame.Y + 50, plr.Character.HumanoidRootPart.CFrame.Z)
end

function Tweento(iuu)
    Distance = (iuu.Position - plr.Character.HumanoidRootPart.Position).Magnitude
    if Distance <= 220 then
        plr.Character.PrimaryPart.CFrame = iuu
    end
    tween = game:GetService("TweenService"):Create(
        game:GetService("Players").LocalPlayer.Character.HumanoidRootPart,
        TweenInfo.new(Distance/325, Enum.EasingStyle.Linear),
        {CFrame = iuu}
    )
    if plr.Data.Level.Value >= 10 then
        local NearestPotal = CheckNearestTeleporter(iuu)
        if NearestPotal then
            tween:Cancel()
            RETeleport(NearestPotal)
        end
    end
    tween:Play()
end

local LocalPlayerLevelValue = plr.Data.Level.Value

local Q = require(game.ReplicatedStorage.Quests)
local R = {"BartiloQuest", "Trainees", "MarineQuest", "CitizenQuest"}
local function S()
    local T = LocalPlayerLevelValue
    local min = 0
    if T >= 1450 and game.PlaceId == 4442272183 then
        Mob1 = "Water Fighter"
        Mob2 = "ForgottenQuest"
        Mob3 = 2
    elseif T >= 700 and game.PlaceId == 2753915549 then
        Mob1 = "Galley Captain"
        Mob2 = "FountainQuest"
        Mob3 = 2
    elseif
        T >= 2075 and autofullymelee and game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuyDragonTalon", true) ~= 1 and
            game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuyElectricClaw", true) == 1
     then
        Mob1 = "Posessed Mummy"
        Mob2 = "HauntedQuest2"
        Mob3 = 2
    else
        for r, v in pairs(Q) do
            for M, N in pairs(v) do
                local U = N.LevelReq
                for O, P in pairs(N.Task) do
                    if T >= U and U >= min and N.Task[O] > 1 and not table.find(R, tostring(r)) then
                        min = U
                        Mob1 = tostring(O)
                        Mob2 = r
                        Mob3 = M
                    end
                end
            end
        end
    end
end
function CFrameQuest()
    QuestPoses = {}
    for r, v in pairs(getnilinstances()) do
        if
            v:IsA("Model") and v:FindFirstChild("Head") and v.Head:FindFirstChild("QuestBBG") and
                v.Head.QuestBBG.Title.Text == "QUEST"
         then
            QuestPoses[v.Name] = v.Head.CFrame * CFrame.new(0, -2, 2)
        end
    end
    for r, v in pairs(game.Workspace.NPCs:GetDescendants()) do
        if v.Name == "QuestBBG" and v.Title.Text == "QUEST" then
            QuestPoses[v.Parent.Parent.Name] = v.Parent.Parent.Head.CFrame * CFrame.new(0, -2, 2)
        end
    end
    DialoguesList = {}
    for r, v in pairs(require(game.ReplicatedStorage.DialoguesList)) do
        DialoguesList[v] = r
    end
    local V = getscriptclosure(game:GetService("Players").LocalPlayer.PlayerScripts.NPC)
    local W = {}
    for k, v in pairs(debug.getprotos(V)) do
        if #debug.getconstants(v) == 1 then
            table.insert(W, debug.getconstant(v, 1))
        end
    end
    local X = false
    local Y = {}
    for k, v in pairs(debug.getconstants(V)) do
        if type(v) == "string" then
            if v == "Players" then
                X = false
            end
            if not X then
                if v == "Blox Fruit Dealer" then
                    X = true
                end
            else
            end
            if X then
                table.insert(Y, v)
            end
        end
    end
    local Z = {}
    QuestPoint = {}
    for k, v in pairs(Y) do
        if QuestPoses[v] then
            Z[W[k]] = Y[k]
        end
    end
    for r, v in next, Z do
        QuestPoint[r] = QuestPoses[v]
    end
    QuestPoint["SkyExp1Quest"] =
        CFrame.new(
        -7857.28516,
        5544.34033,
        -382.321503,
        -0.422592998,
        0,
        0.906319618,
        0,
        1,
        0,
        -0.906319618,
        0,
        -0.422592998
    )
end
function CheckDoubleQuest()
    local a = {}
    for r, v in pairs(Q) do
        for M, N in pairs(v) do
            local U = N.LevelReq
            for O, P in pairs(N.Task) do
                if O == Mob1 then
                    for _, a0 in next, v do
                        if a0.LevelReq <= game.Players.LocalPlayer.Data.Level.Value and a0.Name ~= "Town Raid" then
                            for a1, a2 in next, a0.Task do
                                if a2 > 1 then
                                    table.insert(a, a1)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    return a
end
local a3 = require(game.ReplicatedStorage:WaitForChild("GuideModule"))
function CheckQuestData()
    for r, v in next, a3.Data do
        if r == "QuestData" then
            return true
        end
    end
    return false
end
function CheckNameDoubleQuest()
    local a
    if CheckQuestData() then
        for r, v in next, a3.Data.QuestData.Task do
            a = r
        end
    end
    return a
end
function CheckNameDoubleQuest2()
    local a
    local a4 = {}
    if CheckQuestData() then
        for r, v in next, a3.Data.QuestData.Task do
            a = r
            table.insert(a4, r)
        end
    end
    return a4
end
function CheckDoubleQuest2()
    S()
    local a5 = {}
    if
        game.Players.LocalPlayer.Data.Level.Value >= 10 and DbQ and CheckQuestData() and
            CheckNameDoubleQuest() == Mob1 and
            #CheckNameDoubleQuest() > 2
     then
        for r, v in pairs(Q) do
            for M, N in pairs(v) do
                for O, P in pairs(N.Task) do
                    if tostring(O) == Mob1 then
                        for a6, a7 in next, v do
                            for a8, a9 in next, a7.Task do
                                if a8 ~= Mob1 and a9 > 1 then
                                    if a7.LevelReq <= game.Players.LocalPlayer.Data.Level.Value then
                                        a5["Name"] = tostring(a8)
                                        a5["NameQuest"] = r
                                        a5["ID"] = a6
                                    else
                                        a5["Name"] = Mob1
                                        a5["NameQuest"] = Mob2
                                        a5["ID"] = Mob3
                                    end
                                    return a5
                                end
                            end
                        end
                    end
                end
            end
        end
    else
        a5["Name"] = Mob1
        a5["NameQuest"] = Mob2
        a5["ID"] = Mob3
        return a5
    end
    a5["Name"] = Mob1
    a5["NameQuest"] = Mob2
    a5["ID"] = Mob3
    return a5
end
function MobLevel1OrMobLevel2()
    local aa = {}
    for r, v in pairs(game.Workspace.Enemies:GetChildren()) do
        if
            not table.find(aa, v.Name) and v:IsA("Model") and v.Name ~= "PirateBasic" and
                not string.find(v.Name, "Brigade") and
                v:FindFirstChild("Humanoid") and
                v.Humanoid.Health > 0 and
                v:FindFirstChild("HumanoidRootPart")
         then
            table.insert(aa, v.Name)
        end
    end
    for r, v in pairs(aa) do
        local ab = v
        v = tostring(v:gsub(" %pLv. %d+%p", ""))
        if tostring(v) == CheckNameDoubleQuest() then
            return tostring(ab)
        end
    end
    return false
end
local ad = game.ReplicatedStorage.Remotes["CommF_"]
CFrameQuest()
function GetQuest()
    if game.Players.LocalPlayer.PlayerGui.Main:FindFirstChild("Quest").Visible then
        return
    end
    if not QuestPoint[tostring(CheckDoubleQuest2().NameQuest)] then
        CFrameQuest()
        return
    end
    if
        (QuestPoint[CheckDoubleQuest2().NameQuest].Position -
            game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 8
     then
        ad:InvokeServer("StartQuest", tostring(CheckDoubleQuest2().NameQuest), CheckDoubleQuest2().ID)
    else
        QuestCFrame = QuestPoint[CheckDoubleQuest2().NameQuest]
        Tweento(QuestCFrame)
    end
end

function CheckEnemies(muahahahah)
    if game.Workspace.Enemies:FindFirstChild(muahahahah) then
        for i, v in pairs(game.Workspace.Enemies:GetChildren()) do
            if v.Name == muahahahah and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                return v
            end
        end
    end
end

function KillMob(Trget)
    dumatestthoi = CheckEnemies(Trget)
    if dumatestthoi then
        if dumatestthoi.Humanoid.Health > 0 and dumatestthoi.Parent and dumatestthoi:FindFirstChild("HumanoidRootPart") then
            repeat task.wait()
                EnableBuso()
                EquipWeapon()
                Stp = dumatestthoi.HumanoidRootPart.CFrame
                dumatestthoi.HumanoidRootPart.CFrame = Stp
                plr.Character.Humanoid.Sit = false
                dumatestthoi.HumanoidRootPart.Size = Vector3.new(60, 60, 60)
                Tween(dumatestthoi.HumanoidRootPart.CFrame * PosFarm)
                game:GetService'VirtualUser':CaptureController()
                game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
                BringMob(Trget)
            until dumatestthoi.Humanoid.Health <= 0 or not dumatestthoi.Parent
        end
    end
end

spawn(function()
    while task.wait() do
        pcall(function()
            if NoClip == true then
                if not game:GetService("Players").LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyClip") then
                    local Noclip = Instance.new("BodyVelocity")
                    Noclip.Name = "BodyClip"
                    Noclip.Parent = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
                    Noclip.MaxForce = Vector3.new(100000,100000,100000)
                    Noclip.Velocity = Vector3.new(0,0,0)
                end
            else
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyClip"):Destroy()
            end
        end)
    end
end)

spawn(function()
    pcall(function()
        game:GetService("RunService").Stepped:Connect(function()
            if NoClip == true then
                for i,v in pairs(game:GetService("Players").LocalPlayer.Character:GetDescendants()) do
                    if v:IsA("BasePart") then
                        v.CanCollide = false
                    end
                end
            end
        end)
    end)
end)

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/SourceFullNightHub/ewihwg/main/l"))()
local Windows = Library:CreateWindow({ Title = "Night Hub", Creator = "! Nightx" })

local H = Windows:MakeTab({ Name = "Home", Icon = "rbxassetid://17184558565" })

H:CreateToggle({
    Name = "Double Quest",
    Description = "nah",
    Default = false,
    CallBack = function(Value)
        DbQ = Value
    end
})

NoClip = true

spawn(function()
    while wait() do
        if LevelFarm then
            if tonumber(LevelFarm - 1) ~= 0 then
                CheckOldQuest(tonumber(LevelFarm - 1))
            end
        end
    end
end)

function GetMobSpawn(a)
    for r, v in next, game.Workspace.MobSpawns:GetChildren() do
        if v.Name == a then
            return v
        end
    end
end
local J = {}
Mob = ""
Mob1 = ""
plr = game.Players.LocalPlayer
local K = Instance.new("Folder")
K.Parent = game.Workspace
K.Name = "MobSpawns"
repeat
    wait()
until game.Workspace:FindFirstChild("MobSpawns")
function GetMobSpawnList(a)
    k = {}
    for r, v in next, game.Workspace.MobSpawns:GetChildren() do
        if v.Name == a then
            table.insert(k, v)
        end
    end
    return k
end

function GetMob()
    local ae = {}
    for r, v in pairs(game.Workspace.MobSpawns:GetChildren()) do
        if not table.find(ae, v.Name) then
            table.insert(ae, v.Name)
        end
    end
    if string.find(game:GetService("Workspace")["_WorldOrigin"].EnemySpawns:GetChildren()[1].Name, "Lv.") then
        for r, v in pairs(ae) do
            local ab = v
            v = tostring(v:gsub(" %pLv. %d+%p", ""))
            if v == CheckNameDoubleQuest() then
                return ab
            end
        end
    else
        return CheckNameDoubleQuest()
    end
end

spawn(function()
    while wait() do
        if game.Players.LocalPlayer.PlayerGui.Main:FindFirstChild("Quest").Visible then
            if not MobLevel1OrMobLevel2() then
                Check155 = tick()
                Check156 = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                p2 = GetMobSpawnList(GetMob())
                if
                    tick() - Check155 >= 3 * 60 and
                        (game.Players.LocalPlayer.Character.HumanoidRootPart.Position -
                            Check156.Position).Magnitude <= 1500
                 then
                    print("Nah")
                else
                    for r, v in pairs(p2) do
                        pcall(
                            function()
                                if not MobLevel1OrMobLevel2() and h["Farm"] then
                                    if
                                        not game.Players.LocalPlayer.PlayerGui.Main:FindFirstChild(
                                            "Quest"
                                        ).Visible
                                     then
                                        repeat
                                            wait()
                                        until game.Players.LocalPlayer.PlayerGui.Main:FindFirstChild(
                                            "Quest"
                                        ).Visible
                                    end
                                    Tweento(v.CFrame * CFrame.new(0, 10, 8))
                                    NoClip = true
                                    if
                                        (game.Players.LocalPlayer.Character.HumanoidRootPart.Position -
                                            v.Position).Magnitude < 30 and
                                            not v:FindFirstChild("mmb")
                                     then
                                    end
                                end
                            end
                        )
                    end
                end
            else
                for r, v in pairs(game.workspace.Enemies:GetChildren()) do
                    if
                        v.Name == MobLevel1OrMobLevel2() and
                            v:FindFirstChild("HumanoidRootPart") and
                            v:FindFirstChild("Humanoid") and
                            v.Humanoid.Health > 0
                     then
                        repeat
                            KillMob(v)
                        until not h["Farm"] or h["MethodFarm"] ~= "Level" or not v or
                            not v:FindFirstChild("Humanoid") or
                            not v:FindFirstChild("HumanoidRootPart") or
                            v.Humanoid.Health <= 0 or
                            not game.Players.LocalPlayer.PlayerGui.Main:FindFirstChild("Quest").Visible
                    end
                end
            end
        else
            GetQuest()
        end
    end
end)

local CurveFrame = debug.getupvalues(require(game:GetService("Players").LocalPlayer.PlayerScripts:WaitForChild("CombatFramework")))[2]
local RunS = game:GetService("RunService")
local Loop = RunS.RenderStepped
function CurveFuckWeapon()
    local p13 = CurveFrame.activeController
    if not p13 then
        return nil
    end
    
    local wea = p13.blades[1]
    if not wea then
        return nil
    end
    
    while wea.Parent ~= game.Players.LocalPlayer.Character do
        wea = wea.Parent
    end
    
    return wea
end

function getHits(Size)
    local Hits = {}
    
    local function processHumanoid(Human)
        if Human and Human.RootPart and Human.Health > 0 and game.Players.LocalPlayer:DistanceFromCharacter(Human.RootPart.Position) < Size + 5 then
            table.insert(Hits, Human.RootPart)
        end
    end

    for _, v in pairs(workspace.Enemies:GetChildren()) do
        processHumanoid(v:FindFirstChildOfClass("Humanoid"))
    end

    for _, v in pairs(workspace.Characters:GetChildren()) do
        if v ~= game.Players.LocalPlayer.Character then
            processHumanoid(v:FindFirstChildOfClass("Humanoid"))
        end
    end
    return Hits
end
function Boost()
    task.spawn(function()
        game:GetService("ReplicatedStorage").RigControllerEvent:FireServer("weaponChange", tostring(CurveFuckWeapon()))
    end)
end
function Unboost()
    task.spawn(function()
        game:GetService("ReplicatedStorage").RigControllerEvent:FireServer("unequipWeapon", tostring(CurveFuckWeapon()))
    end)
end
local cdnormal = 0
local Animation = Instance.new("Animation")
local CooldownFastAttack = 0
FastAttack = function()
    local ac = CurveFrame.activeController
    if ac and ac.equipped then
        task.spawn(function()
            if tick() - cdnormal > 0.5 then
                ac:attack()
                cdnormal = tick()
            else
                Animation.AnimationId = ac.anims.basic[2]
                ac.humanoid:LoadAnimation(Animation):Play(1, 1)
                game:GetService("ReplicatedStorage").RigControllerEvent:FireServer("hit", getHits(120), 2, "")
            end
        end)
    end
end
bs = tick()
task.spawn(function()
    while task.wait(.2) do
        if NoClip then
            FastI = true
            if bs - tick() > 0.75 then
                task.wait()
                bs = tick()
            end
            spawn(function()
                for i, v in pairs(game.Workspace.Enemies:GetChildren()) do
                    if v.Humanoid.Health > 0 then
                        if (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 100 then
                            FastAttack()
                            task.wait()
                            Boost()
                        end
                    end
                end
            end)
        end
    end
end)
k = tick()
task.spawn(function()
    if FastI then
        while task.wait(.2) do
            if k - tick() > 0.75 then
                task.wait()
                k = tick()
            end
            pcall(function()
                for i, v in pairs(game.Workspace.Enemies:GetChildren()) do
                    if v.Humanoid.Health > 0 then
                        if (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 100 then
                            task.wait(.000025)
                            Unboost()
                        end
                    end
                end
            end)
        end
    end
end)
task.spawn(function()
    while task.wait() do
        if FastI then
            pcall(function()
                CurveFrame.activeController.timeToNextAttack = -1
                CurveFrame.activeController.focusStart = 0
                CurveFrame.activeController.hitboxMagnitude = 60
                CurveFrame.activeController.humanoid.AutoRotate = true
                CurveFrame.activeController.increment = 1 + 1 / 1
            end)
        end
    end
end)

local CameraShaker = require(game.ReplicatedStorage.Util.CameraShaker)
CombatFrameworkR = require(game:GetService("Players").LocalPlayer.PlayerScripts.CombatFramework)
y = debug.getupvalues(CombatFrameworkR)[2]
spawn(function()
    game:GetService("RunService").RenderStepped:Connect(function()
        if NoClip then
            if typeof(y) == "table" then
                pcall(function()
                    CameraShaker:Stop()
                    y.activeController.timeToNextAttack = (math.huge^math.huge^math.huge)
                    y.activeController.timeToNextAttack = -1
                    y.activeController.hitboxMagnitude = 60
                    y.activeController.active = false
                    y.activeController.timeToNextBlock = 0
                    y.activeController.focusStart = 1655503339.0980349
                    y.activeController.increment = 1
                    y.activeController.blocking = false
                    y.activeController.attacking = false
                    y.activeController.humanoid.AutoRotate = true
                end)
            end
        end
    end)
end)
spawn(function()
    game:GetService("RunService").RenderStepped:Connect(function()
        if NoClip == true then
            game.Players.LocalPlayer.Character.Stun.Value = 0
            game.Players.LocalPlayer.Character.Busy.Value = false        
        end
    end)
end)
