repeat wait()
until game:GetService("Players").LocalPlayer:FindFirstChild("DataLoaded")
repeat wait()
    pcall(function()
        if getgenv().Marines then
            for i,v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Marines.Frame.ViewportFrame.TextButton.Activated)) do
                v.Function()
            end
        else
            for i,v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Pirates.Frame.ViewportFrame.TextButton.Activated)) do
                v.Function()
            end
        end
    end)
until game:GetService("Players").LocalPlayer.PlayerGui.Main:FindFirstChild("ChooseTeam") and   not  game:GetService("Players").LocalPlayer.PlayerGui.Main:WaitForChild("ChooseTeam").Visible or not game:GetService("Players").LocalPlayer.PlayerGui.Main:FindFirstChild("ChooseTeam")
repeat wait()
until game:GetService("Players").LocalPlayer:FindFirstChild("WeaponAssetCache")

_G.S = {
    Turnv3 = false,
    Turnv4 = false,
    AutoTurnObservation = false,
    SelectDelay = "0.3",
    TimeWait = 20,
    DelayAttack = 80
}

function LoadSettings()
    if readfile and writefile and isfile and isfolder then
        if not isfolder("Night Hub") then
            makefolder("Night Hub")
        end
        if not isfolder("Night Hub/Blox Fruits/") then
            makefolder("Night Hub/Blox Fruits/")
        end
        if not isfile("Night Hub/Blox Fruits/" .. game.Players.LocalPlayer.Name .. ".json") then
            writefile(
                "Night Hub/Blox Fruits/" .. game.Players.LocalPlayer.Name .. ".json",
                game:GetService("HttpService"):JSONEncode(_G.S)
            )
        else
            local x =
                game:GetService("HttpService"):JSONDecode(
                readfile("Night Hub/Blox Fruits/" .. game.Players.LocalPlayer.Name .. ".json")
            )
            for y, z in pairs(x) do
                _G.S[y] = z
            end
        end
    else
        return
    end
end
function SaveSettings()
    if readfile and writefile and isfile and isfolder then
        if not isfile("Night Hub/Blox Fruits/" .. game.Players.LocalPlayer.Name .. ".json") then
            LoadSettings()
        else
            local x =
                game:GetService("HttpService"):JSONDecode(
                readfile("Night Hub/Blox Fruits/" .. game.Players.LocalPlayer.Name .. ".json")
            )
            local A = {}
            for y, z in pairs(_G.S) do
                A[y] = z
            end
            writefile(
                "Night Hub/Blox Fruits/" .. game.Players.LocalPlayer.Name .. ".json",
                game:GetService("HttpService"):JSONEncode(A)
            )
        end
    else
        return
    end
end
LoadSettings()

local plr = game.Players.LocalPlayer
local lp = game.Players
local WS = game.Workspace
local Rc = game.ReplicatedStorage
local Race = plr.Data.Race.Value
local lvl = plr.Data.Level.Value

if game.PlaceId == 2753915549 then
    Sea1 = true
elseif game.PlaceId == 4442272183 then
    Sea2 = true
elseif game.PlaceId == 7449423635 then
    Sea3 = true
else
    game.Players.LocalPlayer:Kick("Not Support This Game!")
end

game:GetService("Players").LocalPlayer.Idled:connect(function()
    game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    wait(1)
    game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)

local QuestKhac = {"BartiloQuest", "CitizenQuest"}
function QuestG()
    local Lvl = game:GetService("Players").LocalPlayer.Data.Level.Value
    local T = Lvl
    local min = 0
    if Lvl >= 1 and Lvl <= 9 then
        if tostring(game.Players.LocalPlayer.Team) == "Marines" then
            Mob1 = "Trainee"
            Mob2 = "MarineQuest"
            Mob3 = 1
        elseif tostring(game.Players.LocalPlayer.Team) == "Pirates" then
            Mob1 = "Bandit"
            Mob2 = "BanditQuest1"
            Mob3 = 1
        end
    end
    local GuideModule = require(game:GetService("ReplicatedStorage").GuideModule)
    local Quests = require(game:GetService("ReplicatedStorage").Quests)
    for i, v in pairs(GuideModule["Data"]["NPCList"]) do
        for i1, v1 in pairs(v["Levels"]) do
            if Lvl >= v1 then
                if not levelreq then
                    levelreq = 0
                end
                if v1 > levelreq then
                    npcpos = i["CFrame"]
                    Mob3 = i1
                    levelreq = v1
                end
                if #v["Levels"] == 3 and Mob3 == 3 then
                    npcpos = i["CFrame"]
                    Mob3 = 2
                    levelreq = v["Levels"][2]
                end
            end
        end
    end
    for i, v in pairs(Quests) do
        for i1, v1 in pairs(v) do
            for O, P in pairs(v1.Task) do
                if v1["LevelReq"] == levelreq and v1.Task[O] > 1 and not table.find(QuestKhac, tostring(i)) then
                    Mob2 = i
                    for i2, v2 in pairs(v1["Task"]) do
                        Mob1 = i2
                    end
                end
            end
        end
    end
    if Mob2 == "MarineQuest2" then
        Mob2 = "MarineQuest2"
        Mob3 = 1
        Mob1 = "Chief Petty Officer"
        levelreq = 120
    elseif Mob2 == "ImpeMob3" then
        Mob2 = "PrisonerQuest"
        Mob3 = 2
        Mob1 = "Dangerous Prisoner"
        levelreq = 210
    elseif Mob2 == "SkyExp1Quest" then
        if Mob3 == 1 then
        elseif Mob3 == 2 then
        end
    elseif Mob2 == "Area2Quest" and Mob3 == 2 then
        Mob2 = "Area2Quest"
        Mob3 = 1
        Mob1 = "Swan Pirate"
        levelreq = 775
    end
end

function HopServer(bO)
    if not bO then
        bO = 10
    end
    ticklon = tick()
    repeat
        wait()
    until tick() - ticklon >= 1
    local function Hop()
        for r = 1, math.huge do
            if ChooseRegion == nil or ChooseRegion == "" then
                ChooseRegion = "Singapore"
            else
                plr.PlayerGui.ServerBrowser.Frame.Filters.SearchRegion.TextBox.Text = ChooseRegion
            end
            local bP = game.ReplicatedStorage.__ServerBrowser:InvokeServer(r)
            for k, v in pairs(bP) do
                if k ~= game.JobId and v["Count"] < bO then
                    game.ReplicatedStorage.__ServerBrowser:InvokeServer("teleport", k)
                end
            end
        end
        return false
    end
    if not getgenv().Loaded then
        local function bQ(v)
            if v.Name == "ErrorPrompt" then
                if v.Visible then
                    if v.TitleFrame.ErrorTitle.Text == "Teleport Failed" then
                        HopServer()
                        v.Visible = false
                    end
                end
                v:GetPropertyChangedSignal("Visible"):Connect(
                    function()
                        if v.Visible then
                            if v.TitleFrame.ErrorTitle.Text == "Teleport Failed" then
                                HopServer()
                                v.Visible = false
                            end
                        end
                    end
                )
            end
        end
        for k, v in pairs(game.CoreGui.RobloxPromptGui.promptOverlay:GetChildren()) do
            bQ(v)
        end
        game.CoreGui.RobloxPromptGui.promptOverlay.ChildAdded:Connect(bQ)
        getgenv().Loaded = true
    end
    while not Hop() do
        wait()
    end
end

local BlackListLocation = {}
function CheckNearestTeleporter(vcs)
    vcspos = vcs.Position
    min = math.huge
    min2 = math.huge
    local placeId = game.PlaceId
    if placeId == 2753915549 then
        OldWorld = true
    elseif placeId == 4442272183 then
        NewWorld = true
    elseif placeId == 7449423635 then
        ThreeWorld = true
    end
    local chooseis
    if ThreeWorld then
        TableLocations = {
            ["Caslte On The Sea"] = Vector3.new(-5058.77490234375, 314.5155029296875, -3155.88330078125),
            ["Mansion"] = Vector3.new(-12463.8740234375, 374.9144592285156, -7523.77392578125),
            ["Great Tree"] = Vector3.new(28282.5703125, 14896.8505859375, 105.1042709350586),
            ["Hydra island"] = Vector3.new(5314.58203125, 25.419387817382812, -125.94227600097656),
            ["Ngu1"] = Vector3.new(-11993.580078125, 334.7812805175781, -8844.1826171875),
            ["ngu2"] = Vector3.new(5314.58203125, 25.419387817382812, -125.94227600097656),
            ["Temple Of Time"] = Vector3.new(2957.833740234375, 2286.495361328125, -7217.05078125)
        }
        if game:GetService("Workspace").Map.CakeLoaf.BigMirror.Other.Transparency == 0 then
        --TableLocations["Dismension"] = Vector3.new(-1990.672607421875, 4532.99951171875, -14973.6748046875)
        end
    elseif NewWorld then
        TableLocations = {
            ["Mansion"] = Vector3.new(-288.46246337890625, 306.130615234375, 597.9988403320312),
            ["Flamingo"] = Vector3.new(2284.912109375, 15.152046203613281, 905.48291015625),
            ["122"] = Vector3.new(923.21252441406, 126.9760055542, 32852.83203125),
            ["3032"] = Vector3.new(-6508.5581054688, 89.034996032715, -132.83953857422)
        }
    elseif OldWorld then
        TableLocations = {
            ["1"] = Vector3.new(-7894.6201171875, 5545.49169921875, -380.2467346191406),
            ["2"] = Vector3.new(-4607.82275390625, 872.5422973632812, -1667.556884765625),
            ["3"] = Vector3.new(61163.8515625, 11.759522438049316, 1819.7841796875),
            ["4"] = Vector3.new(3876.280517578125, 35.10614013671875, -1939.3201904296875)
        }
    end
    mmbb = {}
    for i2, v2 in pairs(TableLocations) do
        if not table.find(BlackListLocation, i2) then
            mmbb[i2] = v2
        end
    end
    TableLocations = mmbb
    TableLocations2 = {}
    for i, v in pairs(TableLocations) do
        if typeof(v) ~= "table" then
            TableLocations2[i] = (v - vcspos).Magnitude
        else
            TableLocations2[i] = (v["POS"] - vcspos).Magnitude
        end
    end
    for i, v in pairs(TableLocations2) do
        if v < min then
            min = v
            min2 = v
        end
    end
    for i, v in pairs(TableLocations2) do
        if v < min then
            min = v
            min2 = v
        end
    end
    for i, v in pairs(TableLocations2) do
        if v <= min then
            choose = TableLocations[i]
        end
    end
    min3 = (vcspos - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
    if min2 + 100 <= min3 then
        return choose
    end
end

function requestEntrance(vector3)
    args = {
        "requestEntrance",
        vector3
    }
    game.ReplicatedStorage.Remotes.CommF_:InvokeServer(unpack(args))
    oldcframe = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
    char = game.Players.LocalPlayer.Character.HumanoidRootPart
    char.CFrame = CFrame.new(oldcframe.X, oldcframe.Y + 50, oldcframe.Z)
    if plr.Character:FindFirstChild("PartTele") then
        plr.Character:FindFirstChild("PartTele").CFrame = plr.Character.HumanoidRootPart.CFrame
    end
    task.wait(0.5)
end
function WaitHRP(q0) 
    if not q0 then return end
    return q0.Character:WaitForChild("HumanoidRootPart", 9) 
end 
function Tween(Pos)
    pcall(function()
        if game.Players.LocalPlayer.Character.Humanoid.Health > 0 and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            Distance = (Pos.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
            game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart", 9)
            game.Players.LocalPlayer.Character:WaitForChild("Head", 9)
            if not Pos then return end
            if not plr.Character:FindFirstChild("PartTele") then
                local PartTele = Instance.new("Part", plr.Character) -- Create part
                PartTele.Size = Vector3.new(10,1,10)
                PartTele.Name = "PartTele"
                PartTele.Anchored = true
                PartTele.Transparency = 1
                PartTele.CanCollide = false
                PartTele.CFrame = WaitHRP(plr).CFrame 
                PartTele:GetPropertyChangedSignal("CFrame"):Connect(function()
                    task.wait(0.01)
                    WaitHRP(plr).CFrame = PartTele.CFrame
                end)
            end
            tween = game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.PartTele, TweenInfo.new(Distance / 325, Enum.EasingStyle.Linear),{CFrame = Pos})
            local NearestEntraceFunction = CheckNearestTeleporter(Pos)
            if NearestEntraceFunction then
                pcall(function()
                    tween:Cancel()
                end)
                requestEntrance(NearestEntraceFunction)
            end
            if Distance <= 250 then
                tween:Cancel()
                game.Players.LocalPlayer.Character.PartTele.CFrame = Pos
            end
            tween:Play()
        end
    end)
end

function Tweento(iuu)
    Distance = (iuu.Position - plr.Character.HumanoidRootPart.Position).Magnitude
    if game.Players.LocalPlayer.Character.Humanoid.Health > 0 and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        Distance = (iuu.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
        game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart", 9)
        game.Players.LocalPlayer.Character:WaitForChild("Head", 9)
        if not iuu then return end
        if not plr.Character:FindFirstChild("PartTele") then
            local PartTele = Instance.new("Part", plr.Character) -- Create part
            PartTele.Size = Vector3.new(10,1,10)
            PartTele.Name = "PartTele"
            PartTele.Anchored = true
            PartTele.Transparency = 1
            PartTele.CanCollide = false
            PartTele.CFrame = WaitHRP(plr).CFrame 
            PartTele:GetPropertyChangedSignal("CFrame"):Connect(function()
                task.wait(0.01)
                WaitHRP(plr).CFrame = PartTele.CFrame
            end)
        end
        tween = game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.PartTele, TweenInfo.new(Distance / 325, Enum.EasingStyle.Linear),{CFrame = iuu})
        if Distance <= 250 then
            tween:Cancel()
            game.Players.LocalPlayer.Character.PartTele.CFrame = iuu
        end
		tween:Play()
    end
    tween:Play()
end

function Tele(Pos)
    pcall(function()
        if game.Players.LocalPlayer.Character.Humanoid.Health > 0 and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            Distance = (Pos.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
            game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart", 9)
            game.Players.LocalPlayer.Character:WaitForChild("Head", 9)
            if not Pos then return end
            if not plr.Character:FindFirstChild("PartTele") then
                local PartTele = Instance.new("Part", plr.Character) -- Create part
                PartTele.Size = Vector3.new(10,1,10)
                PartTele.Name = "PartTele"
                PartTele.Anchored = true
                PartTele.Transparency = 1
                PartTele.CanCollide = false
                PartTele.CFrame = WaitHRP(plr).CFrame 
                PartTele:GetPropertyChangedSignal("CFrame"):Connect(function()
                    task.wait(0.01)
                    WaitHRP(plr).CFrame = PartTele.CFrame
                end)
            end
            tween = game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.PartTele, TweenInfo.new(Distance / 325, Enum.EasingStyle.Linear),{CFrame = Pos})
            local NearestEntraceFunction = CheckNearestTeleporter(Pos)
            if NearestEntraceFunction then
                pcall(function()
                    tween:Cancel()
                end)
                requestEntrance(NearestEntraceFunction)
            end
            if Distance <= 250 then
                tween:Cancel()
                game.Players.LocalPlayer.Character.PartTele.CFrame = Pos
            end
            tween:Play()
        end
    end)
end

spawn(function()
    while task.wait() do
        pcall(function()
            if plr.Character.Humanoid.Health <= 0 or not plr.Character:FindFirstChild("HumanoidRootPart") then
                if plr.Character:FindFirstChild("PartTele") then
                    plr.Character:FindFirstChild("PartTele"):Destroy()
                end
            end
        end)
    end
end)
spawn(function()
    while task.wait() do
        pcall(function()
            if plr.Character:FindFirstChild("PartTele") then
                if (plr.Character.HumanoidRootPart.Position - plr.Character:FindFirstChild("PartTele").Position).Magnitude >= 100 then
                    plr.Character:FindFirstChild("PartTele"):Destroy()
                end
            end
        end)
    end
end)

function CancelTween()
    if plr.Character.Head:FindFirstChild("BodyClip") then
        plr.Character.Head:FindFirstChild("BodyClip"):Destroy()
    end
    if plr.Character:FindFirstChild("PartTele") then
        plr.Character:FindFirstChild("PartTele"):Destroy()
    end
    NoClip = false
    return Tween(plr.Character.HumanoidRootPart.CFrame)
end

function Bypass(Ps)
    if (Ps.Position - plr.Character.HumanoidRootPart.Position).Magnitude < 20000 then
        if _G.S.NoBypassIfHaveItem then
            if CheckBackpack("God's Chalice") or CheckBackpack("Fist Of Darkness") then
                Tween(Ps)
            else
                repeat
                    CancelTween()
                    wait()
                    if plr.Character:FindFirstChild("PartTele") then
                        plr.Character:FindFirstChild("PartTele").CFrame = Ps
                    end
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Ps
                    game.Players.LocalPlayer.Character.Head:Destroy()
                    game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid"):ChangeState(15)
                    wait(2)
                    game.Players.LocalPlayer.Character.PrimaryPart.CFrame = Ps
                    wait(3)
                until (Ps.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 2000 or v.Humanoid.Health <= 0
            end
        else
            repeat
                CancelTween()
                wait()
                if plr.Character:FindFirstChild("PartTele") then
                    plr.Character:FindFirstChild("PartTele").CFrame = Ps
                end
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Ps
                game.Players.LocalPlayer.Character.Head:Destroy()
                game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid"):ChangeState(15)
                wait(2)
                game.Players.LocalPlayer.Character.PrimaryPart.CFrame = Ps
                wait(3)
            until (Ps.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 2000 or v.Humanoid.Health <= 0
        end
    else
        Tween(Ps)
    end
end
function CheckDistance(Target1, TARGET2)
    if not TARGET2 then
        TARGET2 = plr.Character.HumanoidRootPart
    end
    dau, buoi =
    pcall(function()
        i = Target1.Position
        v = TARGET2.Position
    end)
    if dau then
        i = Target1.Position
        v = TARGET2.Position
        return (i - v).Magnitude
    end
end

function Byp(nahupgrade)
    if CheckDistance(nahupgrade) > 4500 then
        Bypass(nahupgrade)
    elseif CheckDistance(nahupgrade) < 4500 then
        Tween(nahupgrade)
    end
end

function CFrameQuest()
    QuestPoses = {}
    for r, v in pairs(getnilinstances()) do
        if
            v:IsA("Model") and v:FindFirstChild("Head") and v.Head:FindFirstChild("QuestBBG") and
                v.Head.QuestBBG.Title.Text == "QUEST"
         then
            QuestPoses[v.Name] = v.Head.CFrame * CFrame.new(0, -2, 2)
        end
    end
    for r, v in pairs(game.Workspace.NPCs:GetDescendants()) do
        if v.Name == "QuestBBG" and v.Title.Text == "QUEST" then
            QuestPoses[v.Parent.Parent.Name] = v.Parent.Parent.Head.CFrame * CFrame.new(0, -2, 2)
        end
    end
    DialoguesList = {}
    for r, v in pairs(require(game.ReplicatedStorage.DialoguesList)) do
        DialoguesList[v] = r
    end
    local V = getscriptclosure(game:GetService("Players").LocalPlayer.PlayerScripts.NPC)
    local W = {}
    for k, v in pairs(debug.getprotos(V)) do
        if #debug.getconstants(v) == 1 then
            table.insert(W, debug.getconstant(v, 1))
        end
    end
    local X = false
    local Y = {}
    for k, v in pairs(debug.getconstants(V)) do
        if type(v) == "string" then
            if v == "Players" then
                X = false
            end
            if not X then
                if v == "Blox Fruit Dealer" then
                    X = true
                end
            else
            end
            if X then
                table.insert(Y, v)
            end
        end
    end
    local Z = {}
    QuestPoint = {}
    for k, v in pairs(Y) do
        if QuestPoses[v] then
            Z[W[k]] = Y[k]
        end
    end
    for r, v in next, Z do
        QuestPoint[r] = QuestPoses[v]
    end
    QuestPoint["SkyExp1Quest"] =
        CFrame.new(
        -7857.28516,
        5544.34033,
        -382.321503,
        -0.422592998,
        0,
        0.906319618,
        0,
        1,
        0,
        -0.906319618,
        0,
        -0.422592998
    )
end
local Q = require(game.ReplicatedStorage.Quests)
local a3 = require(game.ReplicatedStorage:WaitForChild("GuideModule"))
function CheckDataQuest()
    for r, v in next, a3.Data do
        if r == "QuestData" then
            return true
        end
    end
    return false
end
function CheckNameMobDoubleQuest()
    local a
    if CheckDataQuest() then
        for r, v in next, a3.Data.QuestData.Task do
            a = r
        end
    end
    return a
end
function CheckDoubleQuestSkidcuaYMF()
    QuestG()
    local a5 = {}
    if
        game.Players.LocalPlayer.Data.Level.Value >= 10 and _G.S.DoubleQuest and CheckDataQuest() and
            CheckNameMobDoubleQuest() == Mob1 and
            #CheckNameMobDoubleQuest() > 2
     then
        for r, v in pairs(Q) do
            for M, N in pairs(v) do
                for O, P in pairs(N.Task) do
                    if tostring(O) == Mob1 then
                        for a6, a7 in next, v do
                            for a8, a9 in next, a7.Task do
                                if a8 ~= Mob1 and a9 > 1 then
                                    if a7.LevelReq <= game.Players.LocalPlayer.Data.Level.Value then
                                        a5["Name"] = tostring(a8)
                                        a5["Mob2"] = r
                                        a5["ID"] = a6
                                    else
                                        a5["Name"] = Mob1
                                        a5["Mob2"] = Mob2
                                        a5["ID"] = Mob3
                                    end
                                    return a5
                                end
                            end
                        end
                    end
                end
            end
        end
    else
        a5["Name"] = Mob1
        a5["Mob2"] = Mob2
        a5["ID"] = Mob3
        return a5
    end
    a5["Name"] = Mob1
    a5["Mob2"] = Mob2
    a5["ID"] = Mob3
    return a5
end
function MobLevel1OrMobLevel2()
    local aa = {}
    for r, v in pairs(game.Workspace.Enemies:GetChildren()) do
        if
            not table.find(aa, v.Name) and v:IsA("Model") and v.Name ~= "PirateBasic" and
                not string.find(v.Name, "Brigade") and
                v:FindFirstChild("Humanoid") and
                v.Humanoid.Health > 0 and
                v:FindFirstChild("HumanoidRootPart")
         then
            table.insert(aa, v.Name)
        end
    end
    for r, v in pairs(aa) do
        local ab = v
        v = tostring(v:gsub(" %pLv. %d+%p", ""))
        if tostring(v) == CheckNameMobDoubleQuest() then
            return tostring(ab)
        end
    end
    return false
end
local ad = game.ReplicatedStorage.Remotes["CommF_"]
CFrameQuest()
function GetQuest()
    if game.Players.LocalPlayer.PlayerGui.Main:FindFirstChild("Quest").Visible then
        return
    end
    if not QuestPoint[tostring(CheckDoubleQuestSkidcuaYMF().Mob2)] then
        CFrameQuest()
        return
    end
    if
        (QuestPoint[CheckDoubleQuestSkidcuaYMF().Mob2].Position -
            game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 10
     then
        ad:InvokeServer("StartQuest", tostring(CheckDoubleQuestSkidcuaYMF().Mob2), CheckDoubleQuestSkidcuaYMF().ID)
    else
        QuestCFrame = QuestPoint[CheckDoubleQuestSkidcuaYMF().Mob2]
        if _G.S.BypassTele then
            Byp(QuestCFrame)
        else
            NoClip = true
            Tween(QuestCFrame)
        end
    end
end

Mob = ""
Mob1 = ""
plr = game.Players.LocalPlayer
if game.Workspace:FindFirstChild("MobSpawns") then
    for i, v in pairs(game.Workspace:GetChildren()) do
        if v.Name == "MobSpawns" then
            v:Destroy()
        end
    end
end
local CreateFoldermmb = Instance.new("Folder")
CreateFoldermmb.Parent = game.Workspace
CreateFoldermmb.Name = "MobSpawns"

function RemoveLevelTitle(v)
    return tostring(tostring(v):gsub(" %pLv. %d+%p", ""):gsub(" %pRaid Boss%p", ""):gsub(" %pBoss%p", ""))
end 
task.spawn(
    function()
        while task.wait() do 
            pcall(function()
                for i,v in pairs(game.workspace.MobSpawns:GetChildren()) do  
                    v.Name = RemoveLevelTitle(v.Name)
                end
            end)
            task.wait(50)
        end
    end
)
function GetSeaBeastTrial()
    if not game.Workspace.Map:FindFirstChild("FishmanTrial") then
        SpamSkill = nil
        return nil
    end
    if game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Trial of Water") then
        FishmanTrial = game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Trial of Water")
    end
    if FishmanTrial and CheckDistance(FishmanTrial) < 2000 then
        for i, v in next, game:GetService("Workspace").SeaBeasts:GetChildren() do
            if
                string.find(v.Name, "SeaBeast") and v:FindFirstChild("HumanoidRootPart") and
                    (v.HumanoidRootPart.Position - FishmanTrial.Position).Magnitude <= 1500
             then
                if v.Health.Value > 0 then
                    return v
                end
            end
        end
    end
end
function MobDepTrai()
    MobDepTraiTable = {}
    for i, v in pairs(game:GetService("Workspace")["_WorldOrigin"].EnemySpawns:GetChildren()) do
        table.insert(MobDepTraiTable, v)
    end
    local tablefoldermmb = {}
    for i, v in next, require(game:GetService("ReplicatedStorage").Quests) do
        for i1, v1 in next, v do
            for i2, v2 in next, v1.Task do
                if v2 > 1 then
                    table.insert(tablefoldermmb, i2)
                end
            end
        end
    end
    for i, v in pairs(getnilinstances()) do
        if table.find(tablefoldermmb, RemoveLevelTitle(v.Name)) then
            table.insert(MobDepTraiTable, v)
        end
    end
    return MobDepTraiTable
end
local MobSpawnList = MobDepTrai()
function ReloadFolderMob()
    for i, v in next, game.Workspace.MobSpawns:GetChildren() do
        v:Destroy()
    end
    for i, v in pairs(MobSpawnList) do
        if v then
            if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") then
                MobNew = Instance.new("Part")
                MobNew.CFrame = v.HumanoidRootPart.CFrame
                MobNew.Name = v.Name
                MobNew.Anchored = true
                MobNew.Transparency = 1
                MobNew.CanCollide = false
                MobNew.Parent = game.Workspace.MobSpawns
            elseif v:IsA("Part") then
                MobNew = v:Clone()
                MobNew.Parent = game.Workspace.MobSpawns
            end
        end
    end
end
ReloadFolderMob()
function GetMobSpawnList(a)
    a = RemoveLevelTitle(a)
    k = {}
    for i, v in pairs(game.Workspace.MobSpawns:GetChildren()) do
        if v.Name == a then
            table.insert(k, v)
        end
    end
    return k
end
function GetMob()
    local tablegetmob = {}
    for i, v in pairs(game.Workspace.MobSpawns:GetChildren()) do
        if not table.find(tablegetmob, v.Name) then
            table.insert(tablegetmob, v.Name)
        end
    end
    if string.find(game:GetService("Workspace")["_WorldOrigin"].EnemySpawns:GetChildren()[1].Name, "Lv.") then
        for i, v in pairs(tablegetmob) do
            local b = v
            v = tostring(v:gsub(" %pLv. %d+%p", ""))
            if v == CheckNameMobDoubleQuest() then
                return b
            end
        end
    else
        return CheckNameMobDoubleQuest()
    end
end
function GetMobName(Name)
    local tablegetmob = {}
    for i, v in pairs(game.Workspace.MobSpawns:GetChildren()) do
        if not table.find(tablegetmob, v.Name) then
            table.insert(tablegetmob, v.Name)
        end
    end
    if string.find(game:GetService("Workspace")["_WorldOrigin"].EnemySpawns:GetChildren()[1].Name, "Lv.") then
        for i, v in pairs(tablegetmob) do
            local b = v
            v = tostring(v:gsub(" %pLv. %d+%p", ""))
            if v == Name then
                return b
            end
        end
    else
        return Name
    end
end

function EnableBuso()
    if not plr.Character:FindFirstChild("HasBuso") then
        local args = {[1] = "Buso"}
        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
    end
end

function CheckEnemies(muahahahah)
    if game.Workspace.Enemies:FindFirstChild(muahahahah) then
        for i, v in pairs(game.Workspace.Enemies:GetChildren()) do
            if v.Name == muahahahah and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                return v
            end
        end
    end
end

function CheckBoss(Han)
    if game:GetService("ReplicatedStorage"):FindFirstChild(Han) then
        for r, v in pairs(game:GetService("ReplicatedStorage"):GetChildren()) do
            if v.Name == Han and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                return v
            end
        end
    end
    if game.Workspace.Enemies:FindFirstChild(Han) then
        for r, v in pairs(game.Workspace.Enemies:GetChildren()) do
            if v.Name == Han and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                return v
            end
        end
    end
end

function CheckQuestVisible()
    if plr.PlayerGui.Main.Quest.Visible == true then
        return true
    end
    return false
end

function CheckTextQuest(Tit)
    if string.find(game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, Tit) then
        return true
    end
    return false
end

function EquipTool(Tls)
    local tool = game.Players.LocalPlayer.Backpack:FindFirstChild(Tls)
    if tool then
        wait(0.5)
        game.Players.LocalPlayer.Character.Humanoid:EquipTool(tool)
    end
end

function Click()
    local bc = game:GetService("VirtualUser")
    bc:CaptureController()
    bc:ClickButton1(Vector2.new(851, 158), game:GetService("Workspace").Camera.CFrame)
end

function CheckInventory(OiOiOi)
    for k, v in pairs(game:GetService("ReplicatedStorage").Remotes["CommF_"]:InvokeServer("getInventory")) do
        if v.Name == OiOiOi then
            return v
        end
    end
end

function GetSwordInventory(cac)
    for i,v in pairs(Rc.Remotes.CommF_:InvokeServer("getInventory")) do
        if type(v) == "table" then
            if v.Type == "Sword" then
                if v.Name == cac then
                    if not (plr.Backpack:FindFirstChild(v.Name) or LP.Character:FindFirstChild(v.Name)) then
                        repeat Rc.Remotes.CommF_:InvokeServer("LoadItem",v.Name) wait(2) until plr.Backpack:FindFirstChild(v.Name) or LP.Character:FindFirstChild(v.Name)
                    end
                end
            end
        end
    end
end

function DeleteLava()
    for i,v in pairs(WS:GetDescendants()) do
        if v.Name == "Lava" then   
            v:Destroy()
        end
    end
    for i,v in pairs(Rc:GetDescendants()) do
        if v.Name == "Lava" then   
            v:Destroy()
        end
    end
end

function CheckReplicatedStorage(Mn)
    for i, v in pairs(game.ReplicatedStorage:GetChildren()) do
        if v.Name == Mn then
            return v
        end
    end
end
function GetWP(buoif)
    Nahfck = ""
    for i, v in pairs(plr.Backpack:GetChildren()) do
        if v:IsA("Tool") and v.ToolTip == buoif then
            Nahfck = v.Name
        end
    end
    for i, v in pairs(plr.Character:GetChildren()) do
        if v:IsA("Tool") and v.ToolTip == buoif then
            Nahfck = v.Name
        end
    end
    return Nahfck
end
function GetItemInventory(bj)
    for k, v in pairs(game:GetService("ReplicatedStorage").Remotes["CommF_"]:InvokeServer("getInventory")) do
        if v["Name"] == bj then
            return v["Count"]
        end
    end
    return 0
end
function EquipWeapon(Giet)
    if _G.S.SelectTool == "" or _G.S.SelectTool == nil then
        _G.S.SelectTool = "Melee"
    end
    Giet = GetWP(_G.S.SelectTool)
    local bucac = game.Players.LocalPlayer.Backpack:FindFirstChild(Giet)
    if bucac then
        game.Players.LocalPlayer.Character.Humanoid:EquipTool(bucac)
    end
end

function SendKey(c9, ca)
    if ca == nil then
        game:service("VirtualInputManager"):SendKeyEvent(true, c9, false, game)
        wait()
        game:service("VirtualInputManager"):SendKeyEvent(false, c9, false, game)
    else
        game:service("VirtualInputManager"):SendKeyEvent(true, c9, false, game)
        wait(ca)
        game:service("VirtualInputManager"):SendKeyEvent(false, c9, false, game)
    end
end

local function StartDialog(DialogName)
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local DialogueController = require(ReplicatedStorage.DialogueController)
    local DialoguesList = require(ReplicatedStorage.DialoguesList)
    for Index, Dialog in pairs(DialoguesList) do
        if tostring(Index) == DialogName then
            DialogueController.Start(DialogueController, Dialog)
        end
    end
end

function TweenObject(TweenCFrame,obj,ts)
    if not ts then ts = 350 end
    local tween_s = game:GetService("TweenService")
    local info =
        TweenInfo.new(
        (TweenCFrame.Position -
            obj.Position).Magnitude /
            ts,
        Enum.EasingStyle.Linear
    )
    tween =
        tween_s:Create(
            obj,
        info,
        {CFrame = TweenCFrame}
    )
    tween:Play() 
end

function CheckBackpack(Item)
    for i, v in pairs(plr.Backpack:GetChildren()) do
        if v.Name == Item then
            return true
        end
    end
    for i, v in pairs(plr.Character:GetChildren()) do
        if v.Name == Item then
            return true
        end
    end
    return false
end

function MoonTextureId()
    if Sea1 then
        return game:GetService("Lighting").FantasySky.MoonTextureId
    elseif Sea2 then
        return game:GetService("Lighting").FantasySky.MoonTextureId
    elseif Sea3 then
        return game:GetService("Lighting").Sky.MoonTextureId
    end
end

function BringMob(vvvv)
    for i, v in pairs(game.Workspace.Enemies:GetChildren()) do
        if
            v.Name == vvvv and v.Parent and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 and
                (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <=
                300
         then
            v.HumanoidRootPart.CFrame = cac
            v.Humanoid.JumpPower = 0
            v.Humanoid.WalkSpeed = 0
            v.HumanoidRootPart.Transparency = 1
            v.HumanoidRootPart.CanCollide = false
            v.Head.CanCollide = false
            if v.Humanoid:FindFirstChild("Animator") then
                v.Humanoid.Animator:Destroy()
            end
            v.Humanoid:ChangeState(11)
        end
    end
end

function CheckQuestCompleted()
    for a, a in pairs(
        game:GetService("Players")["LocalPlayer"].PlayerGui:FindFirstChild("Notifications"):GetChildren()
    ) do
        if a.Name == "NotificationTemplate" then
            if string.lower(a.Text):find("quest completed") then
                return true
            end
        end
    end
    return false
end

game:GetService("RunService").RenderStepped:connect(function()
    sethiddenproperty(plr, "SimulationRadius", math.huge)
end)

function KillEnemy(v, Bring, S)
    a = CheckEnemies(v)
    if a.Humanoid.Health > 0 and a.Parent and a:FindFirstChild("HumanoidRootPart") and S then
        repeat task.wait()
            Tween(a.HumanoidRootPart.CFrame * CFrame.new(2, 20, 2))
            cac = a.HumanoidRootPart.CFrame
            a.HumanoidRootPart.CFrame = cac
            a.Humanoid.JumpPower = 0
            a.Humanoid.WalkSpeed = 0
            a.HumanoidRootPart.Transparency = 1
            a.HumanoidRootPart.CanCollide = false
            a.Head.CanCollide = false
            if Bring == nil or Bring == true then
                BringMob(v)
            end
            FastNCooldown = true
            NoClip = true
        until a.Humanoid.Health <= 0 or not a.Parent or not a:FindFirstChild("HumanoidRootPart") or S == false
        NoClip = false
        FastNCooldown = false
    end
end

spawn(
    function()
        while wait() do
            pcall(
                function()
                    if
                            NoClip == true
                     then
                        if not plr.Character.Head:FindFirstChild("BodyClip") then
                            local bv = Instance.new("BodyVelocity")
                            bv.Name = "BodyClip"
                            bv.Velocity = Vector3.new(0, 0, 0)
                            bv.MaxForce = Vector3.new(9999999, 9999999, 9999999)
                            bv.P = 15000
                            bv.Parent = plr.Character.Head
                        end
                        for i, v in pairs(plr.Character:GetDescendants()) do
                            if v:IsA("BasePart") then
                                v.CanCollide = false
                            end
                        end
                    else
                        if plr.Character.Head:FindFirstChild("BodyClip") then
                            plr.Character.Head:FindFirstChild("BodyClip"):Destroy()
                        end
                        plr.Character.Humanoid:ChangeState()
                    end
                end
            )
        end
    end
)

function DisableTween(aL)
    if not aL then
        NoClip = false
        if plr.Character.Head:FindFirstChild("BodyClip") then
            plr.Character.Head:FindFirstChild("BodyClip"):Destroy()
        end
        if plr.Character.Head:FindFirstChild("PartTele") then
            plr.Character.Head:FindFirstChild("PartTele"):Destroy()
        end
        CancelTween()
        return Tween(plr.Character.HumanoidRootPart.CFrame)
    end
end

CountQuestKill = 0
function KillPlayers()
    if not CheckQuestVisible() then
        game.ReplicatedStorage.Remotes["CommF_"]:InvokeServer("PlayerHunter")
        CountQuestKill = CountQuestKill + 1
    elseif CheckQuestVisible() then
        local Cac = string.gsub(game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, "Defeat ", "")
        Cac = string.gsub(Cac, " %p(0/1)%p", "")
        if CheckQuestVisible() and not game:GetService("Workspace").Characters:FindFirstChild(Cac) then
            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AbandonQuest")
        end
        if game.Players[Cac].Data.Level.Value < 20 or game.Players[Cac].Data.Level.Value <= (lvl - 150) or game.Players[Cac].Data.Level.Value >= (lvl + 150) then
            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AbandonQuest")
            print(game.Players[Cac].Data.Level.Value)
        end
        if CountQuestKill >= 15 then
            HopServer()
        end
        if game:GetService("Players").LocalPlayer.PlayerGui.Main:FindFirstChild("Quest").Visible then
            for r, v in next, game:GetService("Workspace").Characters:GetChildren() do
                if v:IsA("Model") and v.Name == Cac then
                    if CheckTextQuest(v.Name) then
                        if game:GetService("Players").LocalPlayer.PlayerGui.Main.PvpDisabled.Visible == false then
                            repeat wait()
                                EquipWeapon()
                                EnableBuso()                                            
                                SizePart(v)
                                Tween(v.HumanoidRootPart.CFrame * CFrame.new(2, 2, 2))
                                NoClip = true
                                if (v.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).Magnitude <= 10 then
                                    SendKey("Z")
                                    SendKey("X")
                                    _G.S.FastAttack = false
                                    game:GetService "VirtualUser":CaptureController()
                                    game:GetService "VirtualUser":Button1Down(Vector2.new(1280, 672))
                                end
                            until game:GetService("Players").LocalPlayer.PlayerGui.Main.PvpDisabled.Visible == true or v.Humanoid.Health <= 0 or not v.Parent or plr.Character.Humanoid.Health <= 0
                            NoClip = false
                            _G.S.FastAttack = true
                            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("EnablePvp")
                        elseif game:GetService("Players").LocalPlayer.PlayerGui.Main.PvpDisabled.Visible == true then
                            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("EnablePvp")
                        end
                    end
                end
            end
        end
    end
end

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/SourceFullNightHub/ewihwg/main/l"))()
Fastbeo = loadstring(game:HttpGet("https://raw.githubusercontent.com/SourceFullNightHub/ewihwg/main/8847hfgg"))()
local Windows = Library:CreateWindow({Title = 'Sitinks Hub'})

function AttackFunction()
    Fastbeo:Attack()
end
function Click()
    local bc = game:GetService("VirtualUser")
    bc:CaptureController()
    bc:ClickButton1(Vector2.new(851, 158), game:GetService("Workspace").Camera.CFrame)
end
spawn(
    function()
        while wait() do
            if FastNCooldown then
                Fastbeo:InputSetting(_G.S)
                Fastbeo:InputValue(_G.S.DelayAttack, _G.S.TimeWait)
                Fastbeo:Attack(true)
            else
                Fastbeo:Attack(false)
            end
        end
    end
)

local S = Windows:CreateTab({Name = 'Shop'})
local T = Windows:CreateTab({Name = 'Settings Farm'})
local F = Windows:CreateTab({Name = 'Farm'})

T:CreateSection({Text = 'Skills Turning'})

T:CreateToggle({
    Name = "Turn Race V4",
    Description = "Auto Turn Race V4 If Can Awakening",
    Default = _G.S.Turnv4,
    Settings = false,
    CallBack = function(Value)
        _G.S.Turnv4 = Value
        SaveSettings()
    end
})

T:CreateToggle({
    Name = "Auto Buso",
    Description = "Auto Enabled Buso Haki",
    Default = true,
    Settings = false,
    CallBack = function(Value)
        _G.AutoBuso = Value
    end
})

T:CreateToggle({
    Name = "Auto Observation",
    Description = "Auto Turn Observation Haki",
    Default = false,
    Settings = false,
    CallBack = function(Value)
        _G.S.AutoTurnObservation = Value
        SaveSettings()
    end
})

spawn(function()
    while wait() do
        pcall(function()
            if _G.S.AutoTurnObservation then
                if not plr.PlayerGui.ScreenGui:FindFirstChild("ImageLabel") then
                    SendKey("E")
                    task.wait(3)
                end
            end
            if _G.AutoBuso then
                if not plr.Character:FindFirstChild("HasBuso") then
                    EnableBuso()
                end
            end
            if _G.S.Turnv4 then
                if plr.Character:FindFirstChild("RaceEnergy") and plr.Character.RaceEnergy.Value >= 1 and not plr.Character.RaceTransformed.Value then
                    SendKey("Y")
                end
            end
        end)
    end
end)

T:CreateSection({Text = 'Farm Settings'})

T:CreateDropdown({
    Name = "FastAttack Delay",
    Description = "Delay Attack",
    Options = {"0.1", "0.2", "0.3"},
    Default = _G.S.SelectDelay,
    CallBack = function(Value)
        _G.S.SelectDelay = Value
        SaveSettings()
    end
})

spawn(function()
    while wait() do
        if _G.S.SelectDelay then
            if _G.S.SelectDelay == "0.1" then
                _G.S.DelayAttack = 200
                _G.S.TimeWait = 0
            elseif _G.S.SelectDelay == "0.2" then
                _G.S.DelayAttack = 100
                _G.S.TimeWait = 10
            elseif _G.S.SelectDelay == "0.1" then
                _G.S.DelayAttack = 80
                _G.S.TimeWait = 20
            end
        end
    end
end)

T:CreateDropdown({
    Name = "Bring Mob Range",
    Description = "",
    Options = {"350", "300", "250"},
    Default = _G.S.BringRange,
    CallBack = function(Value)
        _G.S.BringRange = Value
        SaveSettings()
    end
})

local BypassToggle = T:CreateToggle({
    Name = "Bypass Teleport",
    Description = "Bypass To New CFrame Fast And Safety",
    Default = _G.S.BypassTele,
    Settings = true,
    CallBack = function(Value)
        _G.S.BypassTele = Value
        SaveSettings()
    end
})

BypassToggle:CreateToggle({
    Name = "No Bypass If Have God's Chalice Or Fist Of Darkness",
    Default = _G.S.NoBypassIfHaveItem,
    CallBack = function(Value)
        _G.S.NoBypassIfHaveItem = Value
        SaveSettings()
    end
})

F:CreateSection({Text = 'Select Tool'})

F:CreateDropdown({
    Name = "Select Tool",
    Description = "Select Tool To Farm",
    Options = {"Melee", "Sword"},
    Default = _G.S.SelectTool,
    CallBack = function(Value)
        _G.S.SelectTool = Value
        SaveSettings()
    end
})

F:CreateSection({Text = 'Settings'})

F:CreateButton({
    Name = "Boost FPS",
    Description = "",
    CallBack = function()
        
    end
})

F:CreateButton({
    Name = "Cancel Tween",
    Description = "",
    CallBack = function()
        DisableTween(A)
    end
})

F:CreateSection({Text = 'Farm'})

F:CreateDropdown({
    Name = "Select Method Farm",
    Description = "Select Method Farm < Cake Prince > or < Level > or < Bone >",
    Options = {"Level", "Cake Prince", "Bone"},
    Default = _G.S.SelectMethodFarm,
    CallBack = function(Value)
        _G.S.SelectMethodFarm = Value
        SaveSettings()
    end
})

local ToggleStartFarm = F:CreateToggle({
    Name = "Start Farm",
    Description = "Start Farm Mode Farm Your Selected",
    Default = _G.S.StartFarm,
    Settings = true,
    CallBack = function(Value)
        _G.S.StartFarm = Value
        SaveSettings()
        DisableTween(_G.S.StartFarm)
    end
})

ToggleStartFarm:CreateToggle({
    Name = "Double Quest",
    Default = _G.S.DoubleQuest,
    CallBack = function(Value)
        _G.S.DoubleQuest = Value
        SaveSettings()
   end
})

ToggleStartFarm:CreateToggle({
    Name = "Accept Quest",
    Default = _G.S.AcceptQuest,
    CallBack = function(Value)
        _G.S.AcceptQuest = Value
        SaveSettings()
   end
})

ToggleStartFarm:CreateToggle({
    Name = "No Summon Cake Prince",
    Default = _G.S.SummonCakePrince,
    CallBack = function(Value)
        _G.S.SummonCakePrince = Value
        SaveSettings()
   end
})

spawn(function()
    while wait() do
        pcall(function()
            if _G.S.StartFarm then
                if _G.S.SelectMethodFarm == "Level" then
                    if lvl >= 1 and lvl <= 29 then
                        if CheckEnemies("Sky Bandit") then
                            repeat wait()
                                KillEnemy("Sky Bandit", true, _G.S.StartFarm)
                            until not CheckEnemies("Sky Bandit") or _G.S.StartFarm == false or lvl >= 30
                        else
                            NoClip = true
                            Byp(CFrame.new(-4953.20703125, 295.74420166015625, -2899.22900390625))
                        end
                    elseif lvl >= 30 and lvl <= 49 then
                        if CheckEnemies("Shanda") then
                            repeat wait()
                                KillEnemy("Shanda", true, _G.S.StartFarm)
                            until not CheckEnemies("Shanda") or _G.S.StartFarm == false or lvl >= 50
                        else
                            NoClip = true
                            Tween(CFrame.new(-7678.48974609375, 5566.40380859375, -497.2156066894531))
                        end
                    elseif lvl >= 50 and lvl <= 299 then
                        if not CheckQuestCompleted() then
                            KillPlayers()
                        else
                            if CheckEnemies("Shanda") then
                                repeat wait()
                                    KillEnemy("Shanda", true, _G.S.StartFarm)
                                until not CheckEnemies("Shanda") or _G.S.StartFarm == false or lvl >= 300
                            else
                                NoClip = true
                                Tween(CFrame.new(-7678.48974609375, 5566.40380859375, -497.2156066894531))
                            end
                        end
                    elseif lvl >= 300 then
                        if CheckQuestVisible() then
                            if MobLevel1OrMobLevel2() then
                                for i, v in pairs(WS.Enemies:GetChildren()) do
                                    if v.Name == MobLevel1OrMobLevel2() then
                                        if v.Humanoid.Health > 0 and v.Parent and v:FindFirstChild("HumanoidRootPart") then
                                            repeat wait()
                                                KillEnemy(v.Name, true, _G.S.StartFarm)
                                            until v.Humanoid.Health <= 0 or not v.Parent or not v:FindFirstChild("HumanoidRootPart") or not CheckQuestVisible() or _G.S.StartFarm == false
                                        end
                                    end
                                end
                            elseif not MobLevel1OrMobLevel2() then
                                cac = GetMobSpawnList(GetMob())
                                for i, v in pairs(cac) do
                                    Tween(v.CFrame * CFrame.new(2, 20, 2))
                                end
                            end
                        else
                            GetQuest()
                        end
                    end
                end
            end
        end)
    end
end)
