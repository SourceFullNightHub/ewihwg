if game:GetService("Players").LocalPlayer.PlayerGui.Main:FindFirstChild("ChooseTeam") then
    repeat
        wait()
        if game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("Main").ChooseTeam.Visible == true then
            if getgenv().Team == "Pirates" then
                for i, v in pairs(
                    getconnections(
                        game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container["Pirates"].Frame.TextButton.Activated
                    )
                ) do
                    for a, b in pairs(getconnections(game:GetService("UserInputService").TouchTapInWorld)) do
                        b:Fire()
                    end
                    v.Function()
                end
            else
                for i, v in pairs(
                    getconnections(
                        game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container["Marines"].Frame.TextButton.Activated
                    )
                ) do
                    for a, b in pairs(getconnections(game:GetService("UserInputService").TouchTapInWorld)) do
                        b:Fire()
                    end
                    v.Function()
                end
            end
        end
    until game.Players.LocalPlayer.Team ~= nil and game:IsLoaded()
end

--------------------------------------------------------------------------------------------------------------------------

local Settings = {}
local HttpService = game:GetService("HttpService")
local FolderName = "Sitinks Hub"
local NameGameFile = "-BloxFruit.json"
local SaveFileName = game.Players.LocalPlayer.Name..NameGameFile
local SettingHopServer = {}
local DefaultSettingHopServer = {}
function SaveSettings(fff,fff2)
    if fff~=nil then
        Settings[fff] = fff2
    end
    HttpService = game:GetService("HttpService")
    if not isfolder(FolderName) then
        makefolder(FolderName)
    end
    writefile(FolderName.."/" .. SaveFileName, HttpService:JSONEncode(Settings))
end

function ReadSetting()
local s,e = pcall(function()
    HttpService = game:GetService("HttpService")
    if not isfolder(FolderName) then
        makefolder(FolderName)
    end
    return HttpService:JSONDecode(readfile(FolderName.."/" .. SaveFileName))
end)
if s then return e
else
    SaveSettings()
    return ReadSetting()
end
end
Configs = ReadSetting()
if not pcall(function() readfile(FolderName.."/" .. "Jobid.json") end) then
    writefile(FolderName.."/" .. "Jobid.json", game:GetService("HttpService"):JSONEncode(DefaultSettingHopServer))
end
function CheckJobIdServer()
    local mmb = {}
    for i,v in next,game:GetService("HttpService"):JSONDecode(readfile(FolderName.."/" .. "Jobid.json")) do
        table.insert(mmb,i) 
    end
    return mmb 
end

--------------------------------------------------------------------------------------------------------------------------

local plr = game.Players.LocalPlayer
local lp = game.Players
local WS = game.Workspace
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local CombatFramework = require(game:GetService("Players").LocalPlayer.PlayerScripts:WaitForChild("CombatFramework"))
local CombatFrameworkR = getupvalues(CombatFramework)[2]
local RigController = require(game:GetService("Players")["LocalPlayer"].PlayerScripts.CombatFramework.RigController)
local RigControllerR = getupvalues(RigController)[2]
local Notifygame = require(game.ReplicatedStorage:WaitForChild("Notification"))
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/SourceFullNightHub/ewihwg/main/l"))()
FastKillTrial = loadstring(game:HttpGet("https://raw.githubusercontent.com/SourceFullNightHub/ewihwg/main/8847hfgg"))()
local Race = plr.Data.Race.Value
local plrLevel = plr.Data.Level.Value

--------------------------------------------------------------------------------------------------------------------------

if game.PlaceId == 2753915549 then
    Sea1 = true
elseif game.PlaceId == 4442272183 then
    Sea2 = true
elseif game.PlaceId == 7449423635 then
    Sea3 = true
else
    game.Players.LocalPlayer:Kick("Not Support This Game!")
end

function CurrentWeapon()
    local ac = CombatFrameworkR.activeController
    local ret = ac.blades[1]
    if not ret then return game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Name end
    pcall(function()
        while ret.Parent~=game.Players.LocalPlayer.Character do ret=ret.Parent end
    end)
    if not ret then return game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Name end
    return ret
end

function getAllBladeHitsPlayers(Sizes)
    local Hits = {}
    local Client = game.Players.LocalPlayer
    local Characters = game:GetService("Workspace").Characters:GetChildren()
    for i=1,#Characters do local v = Characters[i]
        local Human = v:FindFirstChildOfClass("Humanoid")
        if v.Name ~= game.Players.LocalPlayer.Name and Human and Human.RootPart and Human.Health > 0 and Client:DistanceFromCharacter(Human.RootPart.Position) < Sizes+5 then
            table.insert(Hits,Human.RootPart)
        end
    end
    return Hits
end

function getAllBladeHits(Sizes)
    local Hits = {}
    local Client = game.Players.LocalPlayer
    local Enemies = game:GetService("Workspace").Enemies:GetChildren()
    for i=1,#Enemies do local v = Enemies[i]
        local Human = v:FindFirstChildOfClass("Humanoid")
        if Human and Human.RootPart and Human.Health > 0 and Client:DistanceFromCharacter(Human.RootPart.Position) < Sizes+5 then
            table.insert(Hits,Human.RootPart)
        end
    end
    return Hits
end

function DetectFastAttack()
    local ac = CombatFrameworkR.activeController
    if ac and ac.equipped then
        for indexincrement = 1, 1 do
            local bladehit = getAllBladeHits(60)
            if #bladehit > 0 then
                local AcAttack8 = debug.getupvalue(ac.attack, 5)
                local AcAttack9 = debug.getupvalue(ac.attack, 6)
                local AcAttack7 = debug.getupvalue(ac.attack, 4)
                local AcAttack10 = debug.getupvalue(ac.attack, 7)
                local NumberAc12 = (AcAttack8 * 798405 + AcAttack7 * 727595) % AcAttack9
                local NumberAc13 = AcAttack7 * 798405
                (function()
                    NumberAc12 = (NumberAc12 * AcAttack9 + NumberAc13) % 1099511627776
                    AcAttack8 = math.floor(NumberAc12 / AcAttack9)
                    AcAttack7 = NumberAc12 - AcAttack8 * AcAttack9
                end)()
                AcAttack10 = AcAttack10 + 1 
                debug.setupvalue(ac.attack, 5, AcAttack8)
                debug.setupvalue(ac.attack, 6, AcAttack9)
                debug.setupvalue(ac.attack, 4, AcAttack7)
                debug.setupvalue(ac.attack, 7, AcAttack10)
                for k, v in pairs(ac.animator.anims.basic) do
                    v:Play(0.01,0.01,0.01)
                end                 
                if game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool") and ac.blades and ac.blades[1] then 
                    game:GetService("ReplicatedStorage").RigControllerEvent:FireServer("weaponChange",tostring(CurrentWeapon()))
                    game.ReplicatedStorage.Remotes.Validator:FireServer(math.floor(NumberAc12 / 1099511627776 * 16777215), AcAttack10)
                    game:GetService("ReplicatedStorage").RigControllerEvent:FireServer("hit", bladehit, indexincrement, "")
                end
            end
        end
    end
end

local Quest = require(game.ReplicatedStorage.Quests)
local AntiThisQyest = {"BartiloQuest", "CitizenQuest"}
local function DataQuest()
    local lvlPl = plr.Data.Level.Value
    local min = 0
    if lvlPl >= 1450 and game.PlaceId == 4442272183 then 
        Mob1 = "Water Fighter"
        Mob2 = "ForgottenQuest"
        Mob3 = 2
    elseif lvlPl >= 700 and game.PlaceId == 2753915549 then
        Mob1 = "Galley Captain"
        Mob2 = "FountainQuest"
        Mob3 = 2
    else
        for i,v in pairs(Quest) do
            for i1,v1 in pairs(v) do
                local lvlreq = v1.LevelReq
                for i2,v2 in pairs(v1.Task) do
                    if lvlPl >= lvlreq and lvlreq >= min and v1.Task[i2] > 1 and not table.find(AntiThisQyest, tostring(i)) then
                        min = lvlreq
                        Mob1 = tostring(i2)
                        Mob2 = i
                        Mob3 = i1
                    end
                end
            end
        end
    end
end

function CFrameQuest()
    QuestPoses = {}
    for r, v in pairs(getnilinstances()) do
        if
            v:IsA("Model") and v:FindFirstChild("Head") and v.Head:FindFirstChild("QuestBBG") and
                v.Head.QuestBBG.Title.Text == "QUEST"
         then
            QuestPoses[v.Name] = v.Head.CFrame * CFrame.new(0, -2, 2)
        end
    end
    for r, v in pairs(game.Workspace.NPCs:GetDescendants()) do
        if v.Name == "QuestBBG" and v.Title.Text == "QUEST" then
            QuestPoses[v.Parent.Parent.Name] = v.Parent.Parent.Head.CFrame * CFrame.new(0, -2, 2)
        end
    end
    DialoguesList = {}
    for r, v in pairs(require(game.ReplicatedStorage.DialoguesList)) do
        DialoguesList[v] = r
    end
    local V = getscriptclosure(game:GetService("Players").LocalPlayer.PlayerScripts.NPC)
    local W = {}
    for k, v in pairs(debug.getprotos(V)) do
        if #debug.getconstants(v) == 1 then
            table.insert(W, debug.getconstant(v, 1))
        end
    end
    local X = false
    local Y = {}
    for k, v in pairs(debug.getconstants(V)) do
        if type(v) == "string" then
            if v == "Players" then
                X = false
            end
            if not X then
                if v == "Blox Fruit Dealer" then
                    X = true
                end
            else
            end
            if X then
                table.insert(Y, v)
            end
        end
    end
    local Z = {}
    QuestPoint = {}
    for k, v in pairs(Y) do
        if QuestPoses[v] then
            Z[W[k]] = Y[k]
        end
    end
    for r, v in next, Z do
        QuestPoint[r] = QuestPoses[v]
    end
    QuestPoint["SkyExp1Quest"] =
        CFrame.new(
        -7857.28516,
        5544.34033,
        -382.321503,
        -0.422592998,
        0,
        0.906319618,
        0,
        1,
        0,
        -0.906319618,
        0,
        -0.422592998
    )
end
local Q = require(game.ReplicatedStorage.Quests)
local a3 = require(game.ReplicatedStorage:WaitForChild("GuideModule"))
function CheckDataQuest()
    for r, v in next, a3.Data do
        if r == "QuestData" then
            return true
        end
    end
    return false
end
function CheckNameMobDoubleQuest()
    local a
    if CheckDataQuest() then
        for r, v in next, a3.Data.QuestData.Task do
            a = r
        end
    end
    return a
end
function CheckDoubleQuestSkidcuaYMF()
    DataQuest()
    local a5 = {}
    if
        game.Players.LocalPlayer.Data.Level.Value >= 10 and Configs["Double Quest"] and CheckDataQuest() and
            CheckNameMobDoubleQuest() == Mob1 and
            #CheckNameMobDoubleQuest() > 2
     then
        for r, v in pairs(Q) do
            for M, N in pairs(v) do
                for O, P in pairs(N.Task) do
                    if tostring(O) == Mob1 then
                        for a6, a7 in next, v do
                            for a8, a9 in next, a7.Task do
                                if a8 ~= Mob1 and a9 > 1 then
                                    if a7.LevelReq <= game.Players.LocalPlayer.Data.Level.Value then
                                        a5["Name"] = tostring(a8)
                                        a5["Mob2"] = r
                                        a5["ID"] = a6
                                    else
                                        a5["Name"] = Mob1
                                        a5["Mob2"] = Mob2
                                        a5["ID"] = Mob3
                                    end
                                    return a5
                                end
                            end
                        end
                    end
                end
            end
        end
    else
        a5["Name"] = Mob1
        a5["Mob2"] = Mob2
        a5["ID"] = Mob3
        return a5
    end
    a5["Name"] = Mob1
    a5["Mob2"] = Mob2
    a5["ID"] = Mob3
    return a5
end
function MobLevel1OrMobLevel2()
    local aa = {}
    for r, v in pairs(game.Workspace.Enemies:GetChildren()) do
        if
            not table.find(aa, v.Name) and v:IsA("Model") and v.Name ~= "PirateBasic" and
                not string.find(v.Name, "Brigade") and
                v:FindFirstChild("Humanoid") and
                v.Humanoid.Health > 0 and
                v:FindFirstChild("HumanoidRootPart")
         then
            table.insert(aa, v.Name)
        end
    end
    for r, v in pairs(aa) do
        local ab = v
        v = tostring(v:gsub(" %pLv. %d+%p", ""))
        if tostring(v) == CheckNameMobDoubleQuest() then
            return tostring(ab)
        end
    end
    return false
end
local ad = game.ReplicatedStorage.Remotes["CommF_"]
CFrameQuest()
function GetQuest()
    if game.Players.LocalPlayer.PlayerGui.Main:FindFirstChild("Quest").Visible then
        return
    end
    if not QuestPoint[tostring(CheckDoubleQuestSkidcuaYMF().Mob2)] then
        CFrameQuest()
        return
    end
    if
        (QuestPoint[CheckDoubleQuestSkidcuaYMF().Mob2].Position -
            game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 10
     then
        ad:InvokeServer("StartQuest", tostring(CheckDoubleQuestSkidcuaYMF().Mob2), CheckDoubleQuestSkidcuaYMF().ID)
    else
        QuestCFrame = QuestPoint[CheckDoubleQuestSkidcuaYMF().Mob2]
        NoClip(true)
        Tween(QuestCFrame)
    end
end

Mob = ""
Mob1 = ""
if game.Workspace:FindFirstChild("MobSpawns") then
    for i, v in pairs(game.Workspace:GetChildren()) do
        if v.Name == "MobSpawns" then
            v:Destroy()
        end
    end
end
local CreateFoldermmb = Instance.new("Folder")
CreateFoldermmb.Parent = game.Workspace
CreateFoldermmb.Name = "MobSpawns"

function RemoveLevelTitle(v)
    return tostring(tostring(v):gsub(" %pLv. %d+%p", ""):gsub(" %pRaid Boss%p", ""):gsub(" %pBoss%p", ""))
end 
task.spawn(
    function()
        while task.wait() do 
            for i,v in pairs(game.workspace.MobSpawns:GetChildren()) do  
                v.Name = RemoveLevelTitle(v.Name)
            end
            task.wait(50)
        end
    end
)
function MobDepTrai()
    MobDepTraiTable = {}
    for i, v in pairs(game:GetService("Workspace")["_WorldOrigin"].EnemySpawns:GetChildren()) do
        table.insert(MobDepTraiTable, v)
    end
    local tablefoldermmb = {}
    for i, v in next, require(game:GetService("ReplicatedStorage").Quests) do
        for i1, v1 in next, v do
            for i2, v2 in next, v1.Task do
                if v2 > 1 then
                    table.insert(tablefoldermmb, i2)
                end
            end
        end
    end
    for i, v in pairs(getnilinstances()) do
        if table.find(tablefoldermmb, RemoveLevelTitle(v.Name)) then
            table.insert(MobDepTraiTable, v)
        end
    end
    return MobDepTraiTable
end
local MobSpawnList = MobDepTrai()
function ReloadFolderMob()
    for i, v in next, game.Workspace.MobSpawns:GetChildren() do
        v:Destroy()
    end
    for i, v in pairs(MobSpawnList) do
        if v then
            if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") then
                MobNew = Instance.new("Part")
                MobNew.CFrame = v.HumanoidRootPart.CFrame
                MobNew.Name = v.Name
                MobNew.Anchored = true
                MobNew.Transparency = 1
                MobNew.CanCollide = false
                MobNew.Parent = game.Workspace.MobSpawns
            elseif v:IsA("Part") then
                MobNew = v:Clone()
                MobNew.Parent = game.Workspace.MobSpawns
            end
        end
    end
end
ReloadFolderMob()
function GetMobSpawnList(a)
    a = RemoveLevelTitle(a)
    k = {}
    for i, v in pairs(game.Workspace.MobSpawns:GetChildren()) do
        if v.Name == a then
            table.insert(k, v)
        end
    end
    return k
end
function GetMob()
    local tablegetmob = {}
    for i, v in pairs(game.Workspace.MobSpawns:GetChildren()) do
        if not table.find(tablegetmob, v.Name) then
            table.insert(tablegetmob, v.Name)
        end
    end
    if string.find(game:GetService("Workspace")["_WorldOrigin"].EnemySpawns:GetChildren()[1].Name, "Lv.") then
        for i, v in pairs(tablegetmob) do
            local b = v
            v = tostring(v:gsub(" %pLv. %d+%p", ""))
            if v == CheckNameMobDoubleQuest() then
                return b
            end
        end
    else
        return CheckNameMobDoubleQuest()
    end
end
function GetMobName(Name)
    local tablegetmob = {}
    for i, v in pairs(game.Workspace.MobSpawns:GetChildren()) do
        if not table.find(tablegetmob, v.Name) then
            table.insert(tablegetmob, v.Name)
        end
    end
    if string.find(game:GetService("Workspace")["_WorldOrigin"].EnemySpawns:GetChildren()[1].Name, "Lv.") then
        for i, v in pairs(tablegetmob) do
            local b = v
            v = tostring(v:gsub(" %pLv. %d+%p", ""))
            if v == Name then
                return b
            end
        end
    else
        return Name
    end
end

function CheckNotify(Tex)
    for i, v in pairs(game.Players.LocalPlayer.PlayerGui.Notifications:GetDescendants()) do
        if v:IsA("TextLabel") then
            if string.find(v.Text, Tex) then
                return true
            end
        end
    end
    return false
end

function WaitHRP(q0) 
    if not q0 then return end
    return q0.Character:WaitForChild("HumanoidRootPart", 9) 
end 

function Tween(Pos)
    pcall(function()
        if game.Players.LocalPlayer.Character.Humanoid.Health > 0 and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            Distance = (Pos.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
            game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart", 9)
            game.Players.LocalPlayer.Character:WaitForChild("Head", 9)
            if not Pos then return end
            if not plr.Character:FindFirstChild("PartTele") then
                local PartTele = Instance.new("Part", plr.Character) -- Create part
                PartTele.Size = Vector3.new(10,1,10)
                PartTele.Name = "PartTele"
                PartTele.Anchored = true
                PartTele.Transparency = 1
                PartTele.CanCollide = false
                PartTele.CFrame = WaitHRP(plr).CFrame 
                PartTele:GetPropertyChangedSignal("CFrame"):Connect(function()
                    task.wait(0.01)
                    WaitHRP(plr).CFrame = PartTele.CFrame
                end)
            end
            tween = game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.PartTele, TweenInfo.new(Distance / 325, Enum.EasingStyle.Linear),{CFrame = Pos})
            if Distance <= 300 then
                tween:Cancel()
                game.Players.LocalPlayer.Character.PartTele.CFrame = Pos
            end
            tween:Play()
            tween.Completed:Wait()
        end
    end)
end

spawn(function()
    while task.wait() do
        pcall(function()
            if plr.Character.Humanoid.Health <= 0 or not plr.Character:FindFirstChild("HumanoidRootPart") then
                if plr.Character:FindFirstChild("PartTele") then
                    plr.Character:FindFirstChild("PartTele"):Destroy()
                end
            end
        end)
    end
end)
spawn(function()
    while task.wait() do
        pcall(function()
            if plr.Character:FindFirstChild("PartTele") then
                if (plr.Character.HumanoidRootPart.Position - plr.Character:FindFirstChild("PartTele").Position).Magnitude >= 100 then
                    plr.Character:FindFirstChild("PartTele"):Destroy()
                end
            end
        end)
    end
end)

function Buso()
    if not plr.Character:FindFirstChild("HasBuso") then
        local args = {[1] = "Buso"}
        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
    end
end

function GetTool(Akiki)
    NameTool = ""
    for i, v in pairs(plr.Backpack:GetChildren()) do
        if v:IsA("Tool") and v.ToolTip == Akiki then
            NameTool = v.Name
        end
    end
    for i, v in pairs(plr.Character:GetChildren()) do
        if v:IsA("Tool") and v.ToolTip == Akiki then
            NameTool = v.Name
        end
    end
    return NameTool
end

function EquipWeapon(Tool)
    if Configs["Select Weapon"] == nil or Configs["Select Weapon"] == "" then
        Configs["Select Weapon"] = "Melee"
    end
    Tool = GetTool(Configs["Select Weapon"])
    local bucac = game.Players.LocalPlayer.Backpack:FindFirstChild(Tool)
    if bucac then
        game.Players.LocalPlayer.Character.Humanoid:EquipTool(bucac)
    end
end

function NoClip(Value)
    if Value == true then
        if not plr.Character.Head:FindFirstChild("NoClip") then
            local BodyVelocityTrash = Instance.new("BodyVelocity")
            BodyVelocityTrash.Name = "NoClip"
            BodyVelocityTrash.Parent = plr.Character.Head
            BodyVelocityTrash.Velocity = Vector3.new(0, 0, 0)
            BodyVelocityTrash.MaxForce = Vector3.new(9999999, 9999999, 9999999)
            BodyVelocityTrash.P = 15000
        end
        for i, v in pairs(plr.Character:GetDescendants()) do
            if v:IsA("BasePart") then
                v.CanCollide = false
            end
        end
    else
        if plr.Character.Head:FindFirstChild("NoClip") then
            plr.Character.Head:FindFirstChild("NoClip"):Destroy()
        end
    end
end

function GetEnemies(a)
    if WS.Enemies:FindFirstChild(a) then
        for r, v in pairs(WS.Enemies:GetChildren()) do
            if v.Name == a then
                if v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and v.Parent and v:FindFirstChild("HumanoidRootPart") then
                    return v
                end
            end
        end
    end
end

function GetEnemy(aa)
    for r, v in pairs(WS.Enemies:GetChildren()) do
        if v.Name == aa then
            if v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and v.Parent and v:FindFirstChild("HumanoidRootPart") then
                return v
            end
        end
    end
    for r, v in pairs(Rc:GetChildren()) do
        if v.Name == aa then
            if v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and v.Parent and v:FindFirstChild("HumanoidRootPart") then
                return v
            end
        end
    end
end

function CheckDistance(Target1, TARGET2)
    if not TARGET2 then
        TARGET2 = plr.Character.HumanoidRootPart
    end
    dau, buoi =
    pcall(function()
        i = Target1.Position
        v = TARGET2.Position
    end)
    if dau then
        i = Target1.Position
        v = TARGET2.Position
        return (i - v).Magnitude
    end
end

function BringMon(xx)
    for i, v in pairs(WS.Enemies:GetChildren()) do
        if v.Name == xx then
            if v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and v.Parent and v:FindFirstChild("HumanoidRootPart") then
                if CheckDistance(v.HumanoidRootPart) <= 300 then
                    v.HumanoidRootPart.CFrame = PosBring
                    v.Humanoid.JumpPower = 0
                    v.Humanoid.WalkSpeed = 0
                    v.HumanoidRootPart.Transparency = 1
                    v.HumanoidRootPart.CanCollide = false
                    v.Head.CanCollide = false
                    if v.Humanoid:FindFirstChild("Animator") then
                        v.Humanoid.Animator:Destroy()
                    end
                    sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius", math.huge)
                    v.Humanoid:ChangeState(11)
                end
            end
        end
    end
end

function KillMob(cac)
    pcall(function()
        v = GetEnemy(cac)
        if v then
            if v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and v.Parent and v:FindFirstChild("HumanoidRootPart") then
                repeat wait()
                    Buso()
                    EquipWeapon()
                    NoClip(true)
                    Tween(v.HumanoidRootPart.CFrame * CFrame.new(2, 15, 2))
                    PosBring = v.HumanoidRootPart.CFrame
                    BringMon(cac)
                until v.Humanoid.Health <= 0 or not v.Parent
            end
        end
    end)
end

--------------------------------------------------------------------------------------------------------------------------

local Window = Library:CreateWindow({Title = "Sitinks Hub"})

local StackAutoFarmTab = Window:CreateTab({Name = "Stack Auto Farm"})

StackAutoFarmTab:CreateDropdown({
    Name = "Select Weapon",
    Description = "Select Weapon To Farm",
    Options = {"Melee", "Sword"},
    Default = Configs["Select Weapon"],
    CallBack = function(Value)
        SaveSettings("Select Weapon", Value)
    end
})

StackAutoFarmTab:CreateSection({Text = 'Farm'})

StackAutoFarmTab:CreateDropdown({
    Name = "Select Method Farm",
    Description = "",
    Options = {"Level Farm", "Cake Prince", "Bone"},
    Default = Configs["Select Method Farm"],
    CallBack = function(Value)
        SaveSettings("Select Method Farm", Value)
    end
})

local ToggleAutoFarm = StackAutoFarmTab:CreateToggle({
    Name = "Auto Farm",
    Description = "Start Farm Method You Select",
    Default = Configs["Auto Farm"],
    Settings = true,
    CallBack = function(Value)
        SaveSettings("Auto Farm", Value)
    end
})

ToggleAutoFarm:CreateToggle({
    Name = "Double Quest",
    Default = Configs["Double Quest"],
    CallBack = function(Value)
      SaveSettings("Double Quest", Value)
   end
})

ToggleAutoFarm:CreateToggle({
    Name = "Accept Quest",
    Default = Configs["Accept Quest"],
    CallBack = function(Value)
      SaveSettings("Accept Quest", Value)
   end
})

local CakePrinceMob = {
    "Baking Staff",
    "Cookie Crafter",
    "Cake Guard",
    "Head Baker"
}

local HauntedCastleMob = {
    "Reborn Skeleton",
    "Posessed Mummy",
    "Living Zombie",
    "Demonic Soul",
}

function AutoFarm()
    if Configs["Select Method Farm"] == "Level Farm" then
        if plr.PlayerGui.Main.Quest.Visible == true then
            if MobLevel1OrMobLevel2() then
                for i, v in pairs(WS.Enemies:GetChildren()) do
                    if v.Name == MobLevel1OrMobLevel2() then
                        if v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and v.Parent and v:FindFirstChild("HumanoidRootPart") then
                            repeat wait()
                                KillMob(v.Name)
                            until v.Humanoid.Health <= 0 or not v.Parent or  plr.PlayerGui.Main.Quest.Visible == false or not Configs["Auto Farm"]
                        end
                    end
                end
            end
        else
            GetQuest()
        end
    elseif Configs["Select Method Farm"] == "Cake Prince" and Sea3 then
        if not game:GetService("Workspace").Map.CakeLoaf.BigMirror.Other.Transparency == 1 then
            if GetEnemy("Cake Prince") then
                repeat wait()
                    KillMob("Cake Prince")
                until not GetEnemy("Cake Prince") or Configs["Select Method Farm"] ~= "Cake Prince" or game:GetService("Workspace").Map.CakeLoaf.BigMirror.Other.Transparency == 1 or Configs["Auto Farm"] == false
            end
        else
            if GetEnemies("Baking Staff") or GetEnemies("Cookie Crafter") or GetEnemies("Cake Guard") or GetEnemies("Head Baker") then
                for i,v in pairs(WS.Enemies:GetChildren()) do
                    if table.find(CakePrinceMob, v.Name) then
                        if v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and v.Parent and v:FindFirstChild("HumanoidRootPart") then
                            repeat wait()
                                KillMob(v.Name)
                            until v.Humanoid.Health <= 0 or not v.Parent or not game:GetService("Workspace").Map.CakeLoaf.BigMirror.Other.Transparency == 1 or Configs["Select Method Farm"] ~= "Cake Prince" or Configs["Auto Farm"] == false
                        end
                    end
                end
            else
                NoClip(true)
                Fuck = GetMobSpawnList(GetMobName("Cake Guard"))
                for i ,v in pairs(Fuck) do
                    NoClip(true)
                    Tween(v.CFrame * CFrame.new(2, 20, 2))
                end
            end
        end
    elseif Configs["Select Method Farm"] == "Bone" and Sea3 then
        if GetEnemies("Reborn Skeleton") or GetEnemies("Living Zombie") or GetEnemies("Demonic Soul") or GetEnemies("Posessed Mummy") then
            for i,v in pairs(WS.Enemies:GetChildren()) do
                if table.find(HauntedCastleMob, v.Name) then
                    if v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and v.Parent and v:FindFirstChild("HumanoidRootPart") then
                        repeat wait()
                            KillMob(v.Name)
                        until v.Humanoid.Health <= 0 or not v.Parent or not game:GetService("Workspace").Map.CakeLoaf.BigMirror.Other.Transparency == 1 or Configs["Select Method Farm"] ~= "Cake Prince" or Configs["Auto Farm"] == false
                    end
                end
            end
        else
            NoClip(true)
            Fuck = GetMobSpawnList(GetMobName("Demonic Soul"))
            for i ,v in pairs(Fuck) do
                NoClip(true)
                Tween(v.CFrame * CFrame.new(2, 20, 2))
            end
        end
    end
end

spawn(function()
    while wait() do
        if Configs["Auto Farm"] then
            AutoFarm()
        end
    end
end)
